# Japanese translation of REXML documentation
# Copyright (C) 2023 gemmaro
# This file is distributed under the same license as the REXML.
#
msgid ""
msgstr ""
"Project-Id-Version: REXML\n"
"POT-Creation-Date: 2023-06-11 20:52+0900\n"
"PO-Revision-Date: 2023-06-11 21:04+0900\n"
"Last-Translator: gemmaro <gemmaro.dev@gmail.com>\n"
"Language-Team: none\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:2
msgid "= \\REXML Tutorial"
msgstr "= \\REXML入門"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:4
msgid "== Why \\REXML?"
msgstr "== なぜ\\REXMLなのか"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:9
msgid ""
"Ruby's \\REXML library is part of the Ruby distribution, so using it "
"requires no gem installations."
msgstr ""
"Rubyの\\REXMLライブラリはRubyの配布物の一部です。\n"
"そのためgemのインストールは必要ありません。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:9
msgid "\\REXML is fully maintained."
msgstr "\\REXMLは手厚く維持管理されています。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:9
msgid "\\REXML is mature, having been in use for long years."
msgstr "\\REXMLは成熟しており、長年使われてきました。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:11
msgid "== To Include, or Not to Include?"
msgstr "== インクルードすべきや否や"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:14
msgid "REXML is a module.  To use it, you must require it:"
msgstr "REXMLはモジュールです。使うためにはrequireせねばなりません。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:16
#, no-wrap
msgid "  require 'rexml' # => true\n"
msgstr "  require 'rexml' # => true\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:18
msgid ""
"If you do not also include it, you must fully qualify references to REXML:"
msgstr ""
"また、includeしなければREXMLを参照するのに完全な修飾を付けねばなりません。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:20
#, no-wrap
msgid "  REXML::Document # => REXML::Document\n"
msgstr "  REXML::Document # => REXML::Document\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:22
msgid ""
"If you also include the module, you may optionally omit <tt>REXML::</tt>:"
msgstr ""
"ここからモジュールをincludeすれば、お好みで<tt>REXML::</tt>を省くことができま"
"す。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:26
#, no-wrap
msgid ""
"  include REXML\n"
"  Document # => REXML::Document\n"
"  REXML::Document # => REXML::Document\n"
msgstr ""
"  include REXML\n"
"  Document # => REXML::Document\n"
"  REXML::Document # => REXML::Document\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:28
msgid "== Preliminaries"
msgstr "== 事前に必要なもの"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:30
msgid "All examples here assume that the following code has been executed:"
msgstr ""
"ここにある全ての例では以下のコードが実行されていることを前提にしています。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:33
#, no-wrap
msgid ""
"  require 'rexml'\n"
"  include REXML\n"
msgstr ""
"  require 'rexml'\n"
"  include REXML\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:38
msgid ""
"The source XML for many examples here is from file {books.xml}[https://www."
"w3schools.com/xml/books.xml] at w3schools.com.  You may find it convenient "
"to open that page in a new tab (Ctrl-click in some browsers)."
msgstr ""
"ここにある多くのソースのXMLの例はw3schools.comにある{books.xml}[https://www."
"w3schools.com/xml/books.xml]が元になっています。そちらのページを新しいタブで"
"開いておく（ブラウザによってはCtrl-クリック）と便利かもしれません。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:41
msgid ""
"Note that your browser may display the XML with modified whitespace and "
"without the XML declaration, which in this case is:"
msgstr ""
"なお、ブラウザはXMLの空白を変更しXMLの宣言がないものを表示するかもしれませ"
"ん。このような場合がそうです。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:43
#, no-wrap
msgid "  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
msgstr "  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:45
msgid "For convenience, we capture the XML into a string variable:"
msgstr "便宜上XMLを文字列変数に保存しておきます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:48
#, no-wrap
msgid ""
"  require 'open-uri'\n"
"  source_string = URI.open('https://www.w3schools.com/xml/books.xml').read\n"
msgstr ""
"  require 'open-uri'\n"
"  source_string = URI.open('https://www.w3schools.com/xml/books.xml').read\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:50
msgid "And into a file:"
msgstr "またファイルにも保存しておきます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:52
#, no-wrap
msgid "  File.write('source_file.xml', source_string)\n"
msgstr "  File.write('source_file.xml', source_string)\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:55
msgid ""
"Throughout these examples, variable +doc+ will hold only the document "
"derived from these sources:"
msgstr ""
"ここにある例では全て、変数+doc+にはこれらのソースから派生した文書のみが入って"
"います。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:57 ../doc/rexml/tutorial.rdoc:67
#, no-wrap
msgid "  doc = Document.new(source_string)\n"
msgstr "  doc = Document.new(source_string)\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:59
msgid "== Parsing \\XML \\Source"
msgstr "== \\XMLのソースを解析する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:61
msgid "=== Parsing a Document"
msgstr "=== 文書を解析する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:63
msgid "Use method REXML::Document::new to parse XML source."
msgstr "XMLのソースの解析には REXML::Document::new メソッドを使います。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:65
msgid "The source may be a string:"
msgstr "ソースには文字列が使えます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:69
msgid "Or an \\IO stream:"
msgstr "もしくはIOストリームも使えます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:73
#, no-wrap
msgid ""
"  doc = File.open('source_file.xml', 'r') do |io|\n"
"    Document.new(io)\n"
"  end\n"
msgstr ""
"  doc = File.open('source_file.xml', 'r') do |io|\n"
"    Document.new(io)\n"
"  end\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:76
msgid ""
"Method <tt>URI.open</tt> returns a StringIO object, so the source can be "
"from a web page:"
msgstr ""
"メソッド<tt>URI.open</tt>はStringIOオブジェクトを返すので、ソースはwebページ"
"からとすることもできます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:81
#, no-wrap
msgid ""
"  require 'open-uri'\n"
"  io = URI.open(\"https://www.w3schools.com/xml/books.xml\")\n"
"  io.class # => StringIO\n"
"  doc = Document.new(io)\n"
msgstr ""
"  require 'open-uri'\n"
"  io = URI.open(\"https://www.w3schools.com/xml/books.xml\")\n"
"  io.class # => StringIO\n"
"  doc = Document.new(io)\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:83
msgid "For any of these sources, the returned object is an REXML::Document:"
msgstr ""
"こうしたソースが何であれ、返されるオブジェクトは REXML::Document です。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:86
#, no-wrap
msgid ""
"  doc       # => <UNDEFINED> ... </>\n"
"  doc.class # => REXML::Document\n"
msgstr ""
"  doc       # => <UNDEFINED> ... </>\n"
"  doc.class # => REXML::Document\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:89
msgid ""
"Note: <tt>'UNDEFINED'</tt> is the \"name\" displayed for a document, even "
"though <tt>doc.name</tt> returns an empty string <tt>\"\"</tt>."
msgstr ""
"補足：<tt>'UNDEFINED'</tt>は文書について表示される「名前」です。\n"
"<tt>doc.name</tt>が空の文字列<tt>\"\"</tt>を返す場合でも同じことです。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:94
msgid ""
"A parsed document may produce \\REXML objects of many classes, but the two "
"that are likely to be of greatest interest are REXML::Document and REXML::"
"Element.  These two classes are covered in great detail in this tutorial."
msgstr ""
"解析された文書は多様なクラスの\\REXMLオブジェクトを生成しますが、特に注目すべ"
"きは恐らく REXML::Document と REXML::Element の2つでしょう。\n"
"これら2つのクラスはこの入門でかなり詳しく押さえます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:96
msgid "=== Context (Parsing Options)"
msgstr "=== 文脈（解析オプション）"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:99
msgid ""
"The context for parsing a document is a hash that influences the way the XML "
"is read and stored."
msgstr ""
"文書を解析する文脈は、XMLが読まれたり保管されたりする方法に影響を与えるハッ"
"シュです。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:101
msgid "The context entries are:"
msgstr "文脈の各項目は次の通り。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:106 ../doc/rexml/context.rdoc:19
msgid "+:respect_whitespace+: controls treatment of whitespace."
msgstr "+:respect_whitespace+: 空白の扱いを制御します。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:106 ../doc/rexml/context.rdoc:19
msgid "+:compress_whitespace+: determines whether whitespace is compressed."
msgstr "+:compress_whitespace+: 空白が圧縮されるかどうかを決めます。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:106 ../doc/rexml/context.rdoc:19
msgid ""
"+:ignore_whitespace_nodes+: determines whether whitespace-only nodes are to "
"be ignored."
msgstr "+:ignore_whitespace_nodes+: 空白のみのノードが無視されるかを決めます。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:106 ../doc/rexml/context.rdoc:19
msgid "+:raw+: controls treatment of special characters and entities."
msgstr "+:raw+: 特殊文字と実体の扱いを制御します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:108
msgid "See {Element Context}[../context_rdoc.html]."
msgstr "{要素の文脈}[../context_rdoc.html]を参照してください。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:110
msgid "== Exploring the Document"
msgstr "== 文書を探索する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:112
msgid "An REXML::Document object represents an XML document."
msgstr "REXML::DocumentオブジェクトはXML文書を表現します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:114 ../doc/rexml/tutorial.rdoc:303
msgid "The object inherits from its ancestor classes:"
msgstr "オブジェクトはその先祖のクラスから継承します。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:119 ../doc/rexml/tutorial.rdoc:307
msgid "REXML::Child (includes module REXML::Node)"
msgstr "REXML::Child（モジュール REXML::Node がインクルードされています）"

#. type: Bullet: '  - '
#: ../doc/rexml/tutorial.rdoc:119 ../doc/rexml/tutorial.rdoc:307
msgid "REXML::Parent (includes module {Enumerable}[rdoc-ref:Enumerable])."
msgstr "REXML::Parent（{Enumerable}[rdoc-ref:Enumerable]モジュールがインクルードされています）"

#. type: Bullet: '    - '
#: ../doc/rexml/tutorial.rdoc:119 ../doc/rexml/tutorial.rdoc:307
msgid "REXML::Element (includes module REXML::Namespace)."
msgstr "REXML::Element（モジュール REXML::Namespace がインクルードされています）"

#. type: Bullet: '      - '
#: ../doc/rexml/tutorial.rdoc:119
msgid "REXML::Document"
msgstr "REXML::Document"

# 属性というよりは、プロパティとして区別したほうがよさそうです
#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:122
msgid ""
"This section covers only those properties and methods that are unique to a "
"document (that is, not inherited or included)."
msgstr ""
"この節ではこれらのプロパティとメソッドのうち文書に特有なもののみを押さえます"
"（つまり、継承したりインクルードされたりしたものは除きます）。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:124
msgid "=== Document Properties"
msgstr "=== 文書のプロパティ"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:126
msgid "A document has several properties (other than its children);"
msgstr "文書には（子要素の他に）いくつかのプロパティがあります。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:132
msgid "Document type."
msgstr "文書種別"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:132
msgid "Node type."
msgstr "ノードの種類"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:132
msgid "Name."
msgstr "名前"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:132
msgid "Document."
msgstr "文書"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:132
msgid "XPath"
msgstr "XPath"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:134
msgid "[Document Type]"
msgstr "[文書種別]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:136
#, no-wrap
msgid "  A document may have a document type:\n"
msgstr "  文書は文書種別を持つことがあります。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:142
#, no-wrap
msgid ""
"    my_xml = '<!DOCTYPE foo>'\n"
"    my_doc = Document.new(my_xml)\n"
"    doc_type = my_doc.doctype\n"
"    doc_type.class # => REXML::DocType\n"
"    doc_type.to_s  # => \"<!DOCTYPE foo>\"\n"
msgstr ""
"    my_xml = '<!DOCTYPE foo>'\n"
"    my_doc = Document.new(my_xml)\n"
"    doc_type = my_doc.doctype\n"
"    doc_type.class # => REXML::DocType\n"
"    doc_type.to_s  # => \"<!DOCTYPE foo>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:144 ../doc/rexml/tutorial.rdoc:339
msgid "[Node Type]"
msgstr "[ノードの種類]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:146
#, no-wrap
msgid "  A document also has a node type (always +:document+):\n"
msgstr "  文書はノードの種類も持ちます（常に+:document+です）。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:148
#, no-wrap
msgid "    doc.node_type # => :document\n"
msgstr "    doc.node_type # => :document\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:150
msgid "[Name]"
msgstr "[名前]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:152
#, no-wrap
msgid "  A document has a name (always an empty string):\n"
msgstr "  文書は名前を持ちます（常に空文字列です）。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:154
#, no-wrap
msgid "    doc.name # => \"\"\n"
msgstr "    doc.name # => \"\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:156
msgid "[Document]"
msgstr "[文書]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:158
#, no-wrap
msgid "  \\Method REXML::Document#document returns +self+:\n"
msgstr "  メソッド REXML::Document#document は+self+を返します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:160
#, no-wrap
msgid "    doc.document == doc # => true\n"
msgstr "    doc.document == doc # => true\n"

# 明示的に自動リンクが無効になっている点に注意。
#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:164
#, no-wrap
msgid ""
"  An object of a different class (\\REXML::Element or \\REXML::Child)\n"
"  may have a document, which is the document to which the object belongs;\n"
"  if so, that document will be an \\REXML::Document object.\n"
msgstr ""
"  それぞれのクラス（\\REXML::Elementや\\REXML::Child）のオブジェクトは文書を持つかもしれません。\n"
"  これはオブジェクトが属する文書です。\n"
"  もしそのような文書があれば、その文書は\\REXML::Documentオブジェクトです。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:166
#, no-wrap
msgid "    doc.root.document.class # => REXML::Document\n"
msgstr "    doc.root.document.class # => REXML::Document\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:168
msgid "[XPath]"
msgstr "[XPath]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:171
#, no-wrap
msgid ""
"  \\method REXML::Element#xpath returns the string xpath to the element,\n"
"  relative to its most distant ancestor:\n"
msgstr ""
"  メソッド REXML::Element#xpath は要素へのxpath文字列を返します。\n"
"  最も距離の離れた先祖からの相対的なものです。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:176
#, no-wrap
msgid ""
"    doc.root.class             # => REXML::Element\n"
"    doc.root.xpath             # => \"/bookstore\"\n"
"    doc.root.texts.first       # => \"\\n\\n\"\n"
"    doc.root.texts.first.xpath # => \"/bookstore/text()\"\n"
msgstr ""
"    doc.root.class             # => REXML::Element\n"
"    doc.root.xpath             # => \"/bookstore\"\n"
"    doc.root.texts.first       # => \"\\n\\n\"\n"
"    doc.root.texts.first.xpath # => \"/bookstore/text()\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:178
#, no-wrap
msgid "  If there is no ancestor, returns the expanded name of the element:\n"
msgstr "  先祖がいなければ要素の展開された名前を返します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:180
#, no-wrap
msgid "    Element.new('foo').xpath # => \"foo\"\n"
msgstr "    Element.new('foo').xpath # => \"foo\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:182
msgid "=== Document Children"
msgstr "=== 文書の子"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:184
msgid "A document may have children of these types:"
msgstr "文書にはこれらの種類の子を持ち得ます。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:191
msgid "XML declaration."
msgstr "XML宣言"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:191
msgid "Root element."
msgstr "ルート要素"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:191
msgid "Text."
msgstr "テキスト"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:191
msgid "Processing instructions."
msgstr "処理手続き"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:191
msgid "Comments."
msgstr "コメント"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:191
msgid "CDATA."
msgstr "CDATA"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:193
msgid "[XML Declaration]"
msgstr "[XML宣言]"

# TODO: may haveの単語抜けな気がする
#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:195
#, no-wrap
msgid "  A document may an XML declaration, which is stored as an REXML::XMLDecl object:\n"
msgstr ""
"  文書にはXML宣言があることがあります。\n"
"  この宣言は REXML::XMLDecl オブジェクトとして格納されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:198
#, no-wrap
msgid ""
"    doc.xml_decl       # => <?xml ... ?>\n"
"    doc.xml_decl.class # => REXML::XMLDecl\n"
msgstr ""
"    doc.xml_decl       # => <?xml ... ?>\n"
"    doc.xml_decl.class # => REXML::XMLDecl\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:200
#, no-wrap
msgid "    Document.new('').xml_decl # => <?xml ... ?>\n"
msgstr "    Document.new('').xml_decl # => <?xml ... ?>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:205
#, no-wrap
msgid ""
"    my_xml = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\"'\n"
"    my_doc = Document.new(my_xml)\n"
"    xml_decl = my_doc.xml_decl\n"
"    xml_decl.to_s  # => \"<?xml version='1.0' encoding='UTF-8' standalone=\"yes\"?>\"\n"
msgstr ""
"    my_xml = '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\"'\n"
"    my_doc = Document.new(my_xml)\n"
"    xml_decl = my_doc.xml_decl\n"
"    xml_decl.to_s  # => \"<?xml version='1.0' encoding='UTF-8' standalone=\"yes\"?>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:207
#, no-wrap
msgid "  The version, encoding, and stand-alone values may be retrieved separately:\n"
msgstr "  バージョン、エンコーディング、独立したものかどうかの値は個別に取得できます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:211
#, no-wrap
msgid ""
"    my_doc.version      # => \"1.0\"\n"
"    my_doc.encoding     # => \"UTF-8\"\n"
"    my_doc.stand_alone? # => \"yes\"\n"
msgstr ""
"    my_doc.version      # => \"1.0\"\n"
"    my_doc.encoding     # => \"UTF-8\"\n"
"    my_doc.stand_alone? # => \"yes\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:213 ../doc/rexml/tutorial.rdoc:378
msgid "[Root Element]"
msgstr "[ルート要素]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:217
#, no-wrap
msgid ""
"  A document may have a single element child, called the _root_ _element_,\n"
"  which is stored as an REXML::Element object;\n"
"  it may be retrieved with method +root+:\n"
msgstr ""
"  文書は*ルート要素*と呼ばれる単一の子要素を持ち得ます。\n"
"  この要素は REXML::Element オブジェクトとして格納され、メソッド+root+で取得できます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:220
#, no-wrap
msgid ""
"    doc.root           # => <bookstore> ... </>\n"
"    doc.root.class     # => REXML::Element\n"
msgstr ""
"    doc.root           # => <bookstore> ... </>\n"
"    doc.root.class     # => REXML::Element\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:222
#, no-wrap
msgid "    Document.new('').root # => nil\n"
msgstr "    Document.new('').root # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:224
msgid "[Text]"
msgstr "[テキスト]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:227
#, no-wrap
msgid ""
"  A document may have text passages, each of which is stored\n"
"  as an REXML::Text object:\n"
msgstr "文書にはテキストの集まりを持つことがあり、それぞれは REXML::Text オブジェクトとして保管されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:229
#, no-wrap
msgid "    doc.texts.each {|t| p [t.class, t] }\n"
msgstr "    doc.texts.each {|t| p [t.class, t] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:231 ../doc/rexml/tutorial.rdoc:242
#: ../doc/rexml/tutorial.rdoc:259 ../doc/rexml/tutorial.rdoc:276
#: ../doc/rexml/tutorial.rdoc:440 ../doc/rexml/tutorial.rdoc:459
#: ../doc/rexml/tutorial.rdoc:479 ../doc/rexml/tutorial.rdoc:504
#: ../doc/rexml/tutorial.rdoc:588 ../doc/rexml/tutorial.rdoc:785
#: ../doc/rexml/tutorial.rdoc:804 ../doc/rexml/tutorial.rdoc:819
#: ../doc/rexml/tutorial.rdoc:830 ../doc/rexml/tutorial.rdoc:840
#: ../doc/rexml/tutorial.rdoc:849 ../doc/rexml/tutorial.rdoc:861
#: ../doc/rexml/tutorial.rdoc:872 ../doc/rexml/tutorial.rdoc:882
#: ../doc/rexml/tutorial.rdoc:891 ../doc/rexml/tutorial.rdoc:902
#: ../doc/rexml/tutorial.rdoc:912
#, no-wrap
msgid "  Output:\n"
msgstr "  出力：\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:233
#, no-wrap
msgid "    [REXML::Text, \"\\n\"]\n"
msgstr "    [REXML::Text, \"\\n\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:235
msgid "[Processing Instructions]"
msgstr "[処理手続き]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:238
#, no-wrap
msgid ""
"  A document may have processing instructions, which are stored\n"
"  as REXML::Instruction objects:\n"
msgstr "  文書は処理手続きを持つことがあり、 REXML::Instruction オブジェクトとして保管されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:245
#, no-wrap
msgid ""
"    [REXML::Instruction, <?p-i my-application ...?>]\n"
"    [REXML::Instruction, <?p-i my-application ...?>]\n"
msgstr ""
"    [REXML::Instruction, <?p-i my-application ...?>]\n"
"    [REXML::Instruction, <?p-i my-application ...?>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:247
msgid "[Comments]"
msgstr "[コメント]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:250
#, no-wrap
msgid ""
"  A document may have comments, which are stored\n"
"  as REXML::Comment objects:\n"
msgstr "  文書にはコメントがあることがあり、 REXML::Comment オブジェクトとして保管されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:257
#, no-wrap
msgid ""
"    my_xml = <<-EOT\n"
"      <!--foo-->\n"
"      <!--bar-->\n"
"    EOT\n"
"    my_doc = Document.new(my_xml)\n"
"    my_doc.comments.each {|c| p [c.class, c] }\n"
msgstr ""
"    my_xml = <<-EOT\n"
"      <!--foo-->\n"
"      <!--bar-->\n"
"    EOT\n"
"    my_doc = Document.new(my_xml)\n"
"    my_doc.comments.each {|c| p [c.class, c] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:262
#, no-wrap
msgid ""
"    [REXML::Comment, #<REXML::Comment: @parent=<UNDEFINED> ... </>, @string=\"foo\">]\n"
"    [REXML::Comment, #<REXML::Comment: @parent=<UNDEFINED> ... </>, @string=\"bar\">]\n"
msgstr ""
"    [REXML::Comment, #<REXML::Comment: @parent=<UNDEFINED> ... </>, @string=\"foo\">]\n"
"    [REXML::Comment, #<REXML::Comment: @parent=<UNDEFINED> ... </>, @string=\"bar\">]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:264
msgid "[CDATA]"
msgstr "[CDATA]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:267
#, no-wrap
msgid ""
"  A document may have CDATA entries, which are stored\n"
"  as REXML::CData objects:\n"
msgstr "  文書にはCDATA項目があることがあり、 REXML::CData オブジェクトを保管します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:274
#, no-wrap
msgid ""
"    my_xml = <<-EOT\n"
"      <![CDATA[foo]]>\n"
"      <![CDATA[bar]]>\n"
"    EOT\n"
"    my_doc = Document.new(my_xml)\n"
"    my_doc.cdatas.each {|cd| p [cd.class, cd] }\n"
msgstr ""
"    my_xml = <<-EOT\n"
"      <![CDATA[foo]]>\n"
"      <![CDATA[bar]]>\n"
"    EOT\n"
"    my_doc = Document.new(my_xml)\n"
"    my_doc.cdatas.each {|cd| p [cd.class, cd] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:279
#, no-wrap
msgid ""
"    [REXML::CData, \"foo\"]\n"
"    [REXML::CData, \"bar\"]\n"
msgstr ""
"    [REXML::CData, \"foo\"]\n"
"    [REXML::CData, \"bar\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:281
msgid ""
"The payload of a document is a tree of nodes, descending from the root "
"element:"
msgstr "文書の内容物はノードからなる木であり、ルート要素から枝分かれします。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:285
#, no-wrap
msgid ""
"  doc.root.children.each do |child|\n"
"    p [child, child.class]\n"
"  end\n"
msgstr ""
"  doc.root.children.each do |child|\n"
"    p [child, child.class]\n"
"  end\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:287 ../doc/rexml/tutorial.rdoc:1322
msgid "Output:"
msgstr "出力："

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:297
#, no-wrap
msgid ""
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='cooking'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='children'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='web'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"
msgstr ""
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='cooking'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='children'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='web'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"
"  [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"  [REXML::Text, \"\\n\\n\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:299
msgid "== Exploring an Element"
msgstr "== 要素を探索する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:301
msgid "An REXML::Element object represents an XML element."
msgstr "REXML::ElementオブジェクトはXML要素を表現します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:309
msgid "This section covers methods:"
msgstr "この節は以下のメソッドを押さえます。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:313
msgid "Defined in REXML::Element itself."
msgstr "REXML::Element 自体に定義されています。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:313
msgid "Inherited from REXML::Parent and REXML::Child."
msgstr "REXML::Parent と REXML::Child から継承されています。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:313
msgid "Included from REXML::Node."
msgstr "REXML::Node をインクルードしています。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:315
msgid "=== Inside the Element"
msgstr "=== 要素の中身"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:317
msgid "[Brief String Representation]"
msgstr "[短い文字列表現]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:319
#, no-wrap
msgid "  Use method REXML::Element#inspect to retrieve a brief string representation.\n"
msgstr "  REXML::Element#inspect を使うと短い文字列表現が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:321
#, no-wrap
msgid "    doc.root.inspect # => \"<bookstore> ... </>\"\n"
msgstr "    doc.root.inspect # => \"<bookstore> ... </>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:324
#, no-wrap
msgid ""
"  The ellipsis (<tt>...</tt>) indicates that the element has children.\n"
"  When there are no children, the ellipsis is omitted:\n"
msgstr ""
"  点々 (<tt>...</tt>) は要素が子を持つことを示します。\n"
"  子がなければ点々は省かれます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:326
#, no-wrap
msgid "    Element.new('foo').inspect # => \"<foo/>\"\n"
msgstr "    Element.new('foo').inspect # => \"<foo/>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:328
#, no-wrap
msgid "  If the element has attributes, those are also included:\n"
msgstr "  要素に属性があれば、その属性も含まれます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:330
#, no-wrap
msgid "    doc.root.elements.first.inspect # => \"<book category='cooking'> ... </>\"\n"
msgstr "    doc.root.elements.first.inspect # => \"<book category='cooking'> ... </>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:332
msgid "[Extended String Representation]"
msgstr "[拡張された文字列表現]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:335
#, no-wrap
msgid ""
"  Use inherited method REXML::Child.bytes to retrieve an extended\n"
"  string representation.\n"
msgstr "  継承されたメソッド REXML::Child.bytes を使うと拡張された文字列表現が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:337
#, no-wrap
msgid "    doc.root.bytes # => \"<bookstore>\\n\\n<book category='cooking'>\\n  <title lang='en'>Everyday Italian</title>\\n  <author>Giada De Laurentiis</author>\\n  <year>2005</year>\\n  <price>30.00</price>\\n</book>\\n\\n<book category='children'>\\n  <title lang='en'>Harry Potter</title>\\n  <author>J K. Rowling</author>\\n  <year>2005</year>\\n  <price>29.99</price>\\n</book>\\n\\n<book category='web'>\\n  <title lang='en'>XQuery Kick Start</title>\\n  <author>James McGovern</author>\\n  <author>Per Bothner</author>\\n  <author>Kurt Cagle</author>\\n  <author>James Linn</author>\\n  <author>Vaidyanathan Nagarajan</author>\\n  <year>2003</year>\\n  <price>49.99</price>\\n</book>\\n\\n<book category='web' cover='paperback'>\\n  <title lang='en'>Learning XML</title>\\n  <author>Erik T. Ray</author>\\n  <year>2003</year>\\n  <price>39.95</price>\\n</book>\\n\\n</bookstore>\"\n"
msgstr "    doc.root.bytes # => \"<bookstore>\\n\\n<book category='cooking'>\\n  <title lang='en'>Everyday Italian</title>\\n  <author>Giada De Laurentiis</author>\\n  <year>2005</year>\\n  <price>30.00</price>\\n</book>\\n\\n<book category='children'>\\n  <title lang='en'>Harry Potter</title>\\n  <author>J K. Rowling</author>\\n  <year>2005</year>\\n  <price>29.99</price>\\n</book>\\n\\n<book category='web'>\\n  <title lang='en'>XQuery Kick Start</title>\\n  <author>James McGovern</author>\\n  <author>Per Bothner</author>\\n  <author>Kurt Cagle</author>\\n  <author>James Linn</author>\\n  <author>Vaidyanathan Nagarajan</author>\\n  <year>2003</year>\\n  <price>49.99</price>\\n</book>\\n\\n<book category='web' cover='paperback'>\\n  <title lang='en'>Learning XML</title>\\n  <author>Erik T. Ray</author>\\n  <year>2003</year>\\n  <price>39.95</price>\\n</book>\\n\\n</bookstore>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:341
#, no-wrap
msgid "  Use method REXML::Element#node_type to retrieve the node type (always +:element+):\n"
msgstr "  REXML::Element#node_typeメソッドを使うとノードの種類が取得されます（常に+:element+です）。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:343
#, no-wrap
msgid "    doc.root.node_type # => :element\n"
msgstr "    doc.root.node_type # => :element\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:345
msgid "[Raw Mode]"
msgstr "[生モード]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:348
#, no-wrap
msgid ""
"  Use method REXML::Element#raw to retrieve whether (+true+ or +nil+)\n"
"  raw mode is set.\n"
msgstr "  REXML::Element#rawメソッドを使うと生モードが設定されているかどうか（+true+または+nil+）が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:350
#, no-wrap
msgid "    doc.root.raw # => nil\n"
msgstr "    doc.root.raw # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:352
msgid "[Context]"
msgstr "[文脈]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:355
#, no-wrap
msgid ""
"  Use method REXML::Element#context to retrieve the context hash\n"
"  (see {Element Context}[../context_rdoc.html]):\n"
msgstr "  REXML::Element#contextメソッドを使うと文脈ハッシュが取得されます（{要素の文脈}[../context_rdoc.html]を参照してください）。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:357
#, no-wrap
msgid "    doc.root.context # => {}\n"
msgstr "    doc.root.context # => {}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:359
msgid "=== Relationships"
msgstr "=== 関係"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:361
msgid "An element may have:"
msgstr "要素には以下があることがあります。"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:365
msgid "Ancestors."
msgstr "先祖"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:365
msgid "Siblings."
msgstr "兄弟"

#. type: Bullet: '- '
#: ../doc/rexml/tutorial.rdoc:365
msgid "Children."
msgstr "子"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:367
msgid "==== Ancestors"
msgstr "==== 先祖"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:369
msgid "[Containing Document]"
msgstr "[その要素を含む文書]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:371
#, no-wrap
msgid "  Use method REXML::Element#document to retrieve the containing document, if any:\n"
msgstr "  REXML::Element#documentメソッドを使うと、もしあれば、その要素を含む文書が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:376
#, no-wrap
msgid ""
"    ele = doc.root.elements.first   # => <book category='cooking'> ... </>\n"
"    ele.document                    # => <UNDEFINED> ... </>\n"
"    ele = Element.new('foo')        # => <foo/>\n"
"    ele.document                    # => nil\n"
msgstr ""
"    ele = doc.root.elements.first   # => <book category='cooking'> ... </>\n"
"    ele.document                    # => <UNDEFINED> ... </>\n"
"    ele = Element.new('foo')        # => <foo/>\n"
"    ele.document                    # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:380
#, no-wrap
msgid "  Use method REXML::Element#root to retrieve the root element:\n"
msgstr "  REXML::Element#rootメソッドを使うと根要素が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:385
#, no-wrap
msgid ""
"    ele = doc.root.elements.first   # => <book category='cooking'> ... </>\n"
"    ele.root                        # => <bookstore> ... </>\n"
"    ele = Element.new('foo')        # => <foo/>\n"
"    ele.root                        # => <foo/>\n"
msgstr ""
"    ele = doc.root.elements.first   # => <book category='cooking'> ... </>\n"
"    ele.root                        # => <bookstore> ... </>\n"
"    ele = Element.new('foo')        # => <foo/>\n"
"    ele.root                        # => <foo/>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:387
msgid "[Root Node]"
msgstr "[根ノード]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:390
#, no-wrap
msgid ""
"  Use method REXML::Element#root_node to retrieve the most distant ancestor,\n"
"  which is the containing document, if any, otherwise the root element:\n"
msgstr ""
"  REXML::Element#root_node メソッドを使うと最も離れた先祖が取得されます。\n"
"  先祖は、もしあればその要素を含む文書で、なければ根要素です。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:395
#, no-wrap
msgid ""
"    ele = doc.root.elements.first   # => <book category='cooking'> ... </>\n"
"    ele.root_node                   # => <UNDEFINED> ... </>\n"
"    ele = Element.new('foo')        # => <foo/>\n"
"    ele.root_node                   # => <foo/>\n"
msgstr ""
"    ele = doc.root.elements.first   # => <book category='cooking'> ... </>\n"
"    ele.root_node                   # => <UNDEFINED> ... </>\n"
"    ele = Element.new('foo')        # => <foo/>\n"
"    ele.root_node                   # => <foo/>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:397
msgid "[Parent]"
msgstr "[親]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:399
#, no-wrap
msgid "  Use inherited method REXML::Child#parent to retrieve the parent\n"
msgstr "  継承されたメソッド REXML::Child#parent を使うと親が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:404
#, no-wrap
msgid ""
"    ele = doc.root                # => <bookstore> ... </>\n"
"    ele.parent                    # => <UNDEFINED> ... </>\n"
"    ele = doc.root.elements.first # => <book category='cooking'> ... </>\n"
"    ele.parent                    # => <bookstore> ... </>\n"
msgstr ""
"    ele = doc.root                # => <bookstore> ... </>\n"
"    ele.parent                    # => <UNDEFINED> ... </>\n"
"    ele = doc.root.elements.first # => <book category='cooking'> ... </>\n"
"    ele.parent                    # => <bookstore> ... </>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:409
#, no-wrap
msgid ""
"  Use included method REXML::Node#index_in_parent to retrieve the index\n"
"  of the element among all of its parents children (not just the element children).\n"
"  Note that while the index for <tt>doc.root.elements[n]</tt> is 1-based,\n"
"  the returned index is 0-based.\n"
msgstr ""
"  インクルードされたメソッド REXML::Node#index_in_parent を使うと、（要素の子だけでなく）その要素の親の全ての子のうちその要素のインデックスが取得されます。\n"
"  なお<tt>doc.root.elements[n]</tt>のインデックスは1起点ですが、返却されるインデックスは0起点です。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:424
#, no-wrap
msgid ""
"    doc.root.children # =>\n"
"      # [\"\\n\\n\",\n"
"      #  <book category='cooking'> ... </>,\n"
"      #  \"\\n\\n\",\n"
"      #  <book category='children'> ... </>,\n"
"      #  \"\\n\\n\",\n"
"      #  <book category='web'> ... </>,\n"
"      #  \"\\n\\n\",\n"
"      #  <book category='web' cover='paperback'> ... </>,\n"
"      #  \"\\n\\n\"]\n"
"    ele = doc.root.elements[1] # => <book category='cooking'> ... </>\n"
"    ele.index_in_parent # => 2\n"
"    ele = doc.root.elements[2]  # => <book category='children'> ... </>\n"
"    ele.index_in_parent# => 4\n"
msgstr ""
"    doc.root.children # =>\n"
"      # [\"\\n\\n\",\n"
"      #  <book category='cooking'> ... </>,\n"
"      #  \"\\n\\n\",\n"
"      #  <book category='children'> ... </>,\n"
"      #  \"\\n\\n\",\n"
"      #  <book category='web'> ... </>,\n"
"      #  \"\\n\\n\",\n"
"      #  <book category='web' cover='paperback'> ... </>,\n"
"      #  \"\\n\\n\"]\n"
"    ele = doc.root.elements[1] # => <book category='cooking'> ... </>\n"
"    ele.index_in_parent # => 2\n"
"    ele = doc.root.elements[2]  # => <book category='children'> ... </>\n"
"    ele.index_in_parent# => 4\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:426
msgid "==== Siblings"
msgstr "==== 兄弟"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:428
msgid "[Next Element]"
msgstr "[次の要素]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:431
#, no-wrap
msgid ""
"  Use method REXML::Element#next_element to retrieve the first following\n"
"  sibling that is itself an element (+nil+ if there is none):\n"
msgstr ""
"  メソッド REXML::Element#next_element を使うと後続する最初の兄弟が取得されます。\n"
"  兄弟があるならそれは要素です（なければ+nil+です）。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:438
#, no-wrap
msgid ""
"    ele = doc.root.elements[1]\n"
"    while ele do\n"
"      p [ele.class, ele]\n"
"      ele = ele.next_element\n"
"    end\n"
"    p ele\n"
msgstr ""
"    ele = doc.root.elements[1]\n"
"    while ele do\n"
"      p [ele.class, ele]\n"
"      ele = ele.next_element\n"
"    end\n"
"    p ele\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:445 ../doc/rexml/tutorial.rdoc:809
#, no-wrap
msgid ""
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
msgstr ""
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:447
msgid "[Previous Element]"
msgstr "[前の要素]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:450
#, no-wrap
msgid ""
"  Use method REXML::Element#previous_element to retrieve the first preceding\n"
"  sibling that is itself an element (+nil+ if there is none):\n"
msgstr ""
"  メソッド REXML::Element#previous_element を使うと先行する最初の兄弟が取得されます。\n"
"  兄弟があるならそれは要素です（なければ+nil+です）。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:457
#, no-wrap
msgid ""
"    ele = doc.root.elements[4]\n"
"    while ele do\n"
"      p [ele.class, ele]\n"
"      ele = ele.previous_element\n"
"    end\n"
"    p ele\n"
msgstr ""
"    ele = doc.root.elements[4]\n"
"    while ele do\n"
"      p [ele.class, ele]\n"
"      ele = ele.previous_element\n"
"    end\n"
"    p ele\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:464
#, no-wrap
msgid ""
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Element, <book category='cooking'> ... </>]\n"
msgstr ""
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Element, <book category='cooking'> ... </>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:466
msgid "[Next Node]"
msgstr "[次のノード]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:470
#, no-wrap
msgid ""
"  Use included method REXML::Node.next_sibling_node\n"
"  (or its alias <tt>next_sibling</tt>) to retrieve the first following node\n"
"  regardless of its class:\n"
msgstr "  インクルードされるメソッド REXML::Node.next_sibling_node （またはその別称の<tt>next_sibling</tt>）を使うと、そのクラスによらず後続する最初のノードが取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:477
#, no-wrap
msgid ""
"    node = doc.root.children[0]\n"
"    while node do\n"
"      p [node.class, node]\n"
"      node = node.next_sibling\n"
"    end\n"
"    p node\n"
msgstr ""
"    node = doc.root.children[0]\n"
"    while node do\n"
"      p [node.class, node]\n"
"      node = node.next_sibling\n"
"    end\n"
"    p node\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:489 ../doc/rexml/tutorial.rdoc:795
#, no-wrap
msgid ""
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
msgstr ""
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:491
msgid "[Previous Node]"
msgstr "[前のノード]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:495
#, no-wrap
msgid ""
"  Use included method REXML::Node.previous_sibling_node\n"
"  (or its alias <tt>previous_sibling</tt>) to retrieve the first preceding node\n"
"  regardless of its class:\n"
msgstr "  インクルードされるメソッド REXML::Node.previous_sibling_node （もしくはその別称<tt>previous_sibling</tt>）を使うと、クラスによらず先行する最初のノードが取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:502
#, no-wrap
msgid ""
"    node = doc.root.children[-1]\n"
"    while node do\n"
"      p [node.class, node]\n"
"      node = node.previous_sibling\n"
"    end\n"
"    p node\n"
msgstr ""
"    node = doc.root.children[-1]\n"
"    while node do\n"
"      p [node.class, node]\n"
"      node = node.previous_sibling\n"
"    end\n"
"    p node\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:514
#, no-wrap
msgid ""
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
msgstr ""
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Text, \"\\n\\n\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:516
msgid "==== Children"
msgstr "==== 子"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:518
msgid "[Child Count]"
msgstr "[子の個数]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:521
#, no-wrap
msgid ""
"  Use inherited method REXML::Parent.size to retrieve the count\n"
"  of nodes (of all types) in the element:\n"
msgstr "  継承されたメソッド REXML::Parent.size を使うとその要素中の（全種類の）ノードの個数が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:523
#, no-wrap
msgid "    doc.root.size # => 9\n"
msgstr "    doc.root.size # => 9\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:525
msgid "[Child Nodes]"
msgstr "[子ノード]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:528
#, no-wrap
msgid ""
"  Use inherited method REXML::Parent.children to retrieve an array\n"
"  of the child nodes (of all types):\n"
msgstr "  継承されたメソッド REXML::Parent.children を使うと（全種類の）子ノードの配列が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:539
#, no-wrap
msgid ""
"    doc.root.children # =>\n"
"                      # [\"\\n\\n\",\n"
"                      #  <book category='cooking'> ... </>,\n"
"                      #  \"\\n\\n\",\n"
"                      #  <book category='children'> ... </>,\n"
"                      #  \"\\n\\n\",\n"
"                      #  <book category='web'> ... </>,\n"
"                      #  \"\\n\\n\",\n"
"                      #  <book category='web' cover='paperback'> ... </>,\n"
"                      #  \"\\n\\n\"]\n"
msgstr ""
"    doc.root.children # =>\n"
"                      # [\"\\n\\n\",\n"
"                      #  <book category='cooking'> ... </>,\n"
"                      #  \"\\n\\n\",\n"
"                      #  <book category='children'> ... </>,\n"
"                      #  \"\\n\\n\",\n"
"                      #  <book category='web'> ... </>,\n"
"                      #  \"\\n\\n\",\n"
"                      #  <book category='web' cover='paperback'> ... </>,\n"
"                      #  \"\\n\\n\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:541
msgid "[Child at Index]"
msgstr "[インデックスにある子]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:544
#, no-wrap
msgid ""
"  Use method REXML::Element#[] to retrieve the child at a given numerical index,\n"
"  or +nil+ if there is no such child:\n"
msgstr "  メソッド REXML::Element#[] を使うと、与えられた数値のインデックスに子があればそれを、そのような子がなければ+nil+が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:549
#, no-wrap
msgid ""
"    doc.root[0]  # => \"\\n\\n\"\n"
"    doc.root[1]  # => <book category='cooking'> ... </>\n"
"    doc.root[7]  # => <book category='web' cover='paperback'> ... </>\n"
"    doc.root[8]  # => \"\\n\\n\"\n"
msgstr ""
"    doc.root[0]  # => \"\\n\\n\"\n"
"    doc.root[1]  # => <book category='cooking'> ... </>\n"
"    doc.root[7]  # => <book category='web' cover='paperback'> ... </>\n"
"    doc.root[8]  # => \"\\n\\n\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:552
#, no-wrap
msgid ""
"    doc.root[-1] # => \"\\n\\n\"\n"
"    doc.root[-2] # => <book category='web' cover='paperback'> ... </>\n"
msgstr ""
"    doc.root[-1] # => \"\\n\\n\"\n"
"    doc.root[-2] # => <book category='web' cover='paperback'> ... </>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:554
#, no-wrap
msgid "    doc.root[50] # => nil\n"
msgstr "    doc.root[50] # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:556
msgid "[Index of Child]"
msgstr "[子のインデックス]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:559
#, no-wrap
msgid ""
"  Use method REXML::Parent#index to retrieve the zero-based child index\n"
"  of the given object, or <tt>#size - 1</tt> if there is no such child:\n"
msgstr "  メソッド REXML::Parent#index を使うと、もしあれば与えられたオブジェクトのゼロ起点の子のインデックスが、そのような子がなければ<tt>#size - 1</tt>が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:565
#, no-wrap
msgid ""
"    ele = doc.root     # => <bookstore> ... </>\n"
"    ele.index(ele[0])  # => 0\n"
"    ele.index(ele[1])  # => 1\n"
"    ele.index(ele[7])  # => 7\n"
"    ele.index(ele[8])  # => 8\n"
msgstr ""
"    ele = doc.root     # => <bookstore> ... </>\n"
"    ele.index(ele[0])  # => 0\n"
"    ele.index(ele[1])  # => 1\n"
"    ele.index(ele[7])  # => 7\n"
"    ele.index(ele[8])  # => 8\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:568
#, no-wrap
msgid ""
"    ele.index(ele[-1]) # => 8\n"
"    ele.index(ele[-2]) # => 7\n"
msgstr ""
"    ele.index(ele[-1]) # => 8\n"
"    ele.index(ele[-2]) # => 7\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:570
#, no-wrap
msgid "    ele.index(ele[50]) # => 8\n"
msgstr "    ele.index(ele[50]) # => 8\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:572
msgid "[Element Children]"
msgstr "[要素の子]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:575
#, no-wrap
msgid ""
"  Use method REXML::Element#has_elements? to retrieve whether the element\n"
"  has element children:\n"
msgstr "  メソッド REXML::Element#has_elements? を使うと要素に要素の子があるかどうかが取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:578
#, no-wrap
msgid ""
"    doc.root.has_elements?                  # => true\n"
"    REXML::Element.new('foo').has_elements? # => false\n"
msgstr ""
"    doc.root.has_elements?                  # => true\n"
"    REXML::Element.new('foo').has_elements? # => false\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:581
#, no-wrap
msgid ""
"  Use method REXML::Element#elements to retrieve the REXML::Elements object\n"
"  containing the element children:\n"
msgstr "  メソッド REXML::Element#elements を使うと、その要素の子を含む REXML::Elements オブジェクトが取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:586
#, no-wrap
msgid ""
"    eles = doc.root.elements\n"
"    eles      # => #<REXML::Elements:0x000001ee2848e960 @element=<bookstore> ... </>>\n"
"    eles.size # => 4\n"
"    eles.each {|e| p [e.class], e }\n"
msgstr ""
"    eles = doc.root.elements\n"
"    eles      # => #<REXML::Elements:0x000001ee2848e960 @element=<bookstore> ... </>>\n"
"    eles.size # => 4\n"
"    eles.each {|e| p [e.class], e }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:594
#, no-wrap
msgid ""
"    [<book category='cooking'> ... </>,\n"
"     <book category='children'> ... </>,\n"
"     <book category='web'> ... </>,\n"
"     <book category='web' cover='paperback'> ... </>\n"
"    ]\n"
msgstr ""
"    [<book category='cooking'> ... </>,\n"
"     <book category='children'> ... </>,\n"
"     <book category='web'> ... </>,\n"
"     <book category='web' cover='paperback'> ... </>\n"
"    ]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:598
msgid ""
"Note that while in this example, all the element children of the root "
"element are elements of the same name, <tt>'book'</tt>, that is not true of "
"all documents; a root element (or any other element) may have any mixture of "
"child elements."
msgstr ""
"なおこの例ではルート要素の全ての子要素は<tt>'book'</tt>という同じ名前の要素に"
"なっていますが、全ての文書についてそうではありません。\n"
"根要素（あるいは他の任意の要素）は自由に混ざった子要素を持ちえます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:600
msgid "[CDATA Children]"
msgstr "[子のCDATA]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:602
#, no-wrap
msgid "  Use method REXML::Element#cdatas to retrieve a frozen array of CDATA children:\n"
msgstr "  メソッド REXML::Element#cdatas を使うと子のCDATAの凍結された配列が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:613
#, no-wrap
msgid ""
"    my_xml = <<-EOT\n"
"      <root>\n"
"        <![CDATA[foo]]>\n"
"        <![CDATA[bar]]>\n"
"      </root>\n"
"    EOT\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    cdatas my_doc.root.cdatas\n"
"    cdatas.frozen?              # => true\n"
"    cdatas.map {|cd| cd.class } # => [REXML::CData, REXML::CData]\n"
msgstr ""
"    my_xml = <<-EOT\n"
"      <root>\n"
"        <![CDATA[foo]]>\n"
"        <![CDATA[bar]]>\n"
"      </root>\n"
"    EOT\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    cdatas my_doc.root.cdatas\n"
"    cdatas.frozen?              # => true\n"
"    cdatas.map {|cd| cd.class } # => [REXML::CData, REXML::CData]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:615
msgid "[Comment Children]"
msgstr "[子のコメント]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:617
#, no-wrap
msgid "  Use method REXML::Element#comments to retrieve a frozen array of comment children:\n"
msgstr "  メソッド REXML::Element#comments を使うと子のコメントの凍結された配列が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:629
#, no-wrap
msgid ""
"    my_xml = <<-EOT\n"
"      <root>\n"
"        <!--foo-->\n"
"        <!--bar-->\n"
"      </root>\n"
"    EOT\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    comments = my_doc.root.comments\n"
"    comments.frozen?            # => true\n"
"    comments.map {|c| c.class } # => [REXML::Comment, REXML::Comment]\n"
"    comments.map {|c| c.to_s }  # => [\"foo\", \"bar\"]\n"
msgstr ""
"    my_xml = <<-EOT\n"
"      <root>\n"
"        <!--foo-->\n"
"        <!--bar-->\n"
"      </root>\n"
"    EOT\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    comments = my_doc.root.comments\n"
"    comments.frozen?            # => true\n"
"    comments.map {|c| c.class } # => [REXML::Comment, REXML::Comment]\n"
"    comments.map {|c| c.to_s }  # => [\"foo\", \"bar\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:631
msgid "[Processing Instruction Children]"
msgstr "[子の処理手続き]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:634
#, no-wrap
msgid ""
"  Use method REXML::Element#instructions to retrieve a frozen array\n"
"  of processing instruction children:\n"
msgstr "  メソッド REXML::Element#instructions を使うと子の処理手続きの凍結された配列が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:646
#, no-wrap
msgid ""
"    my_xml = <<-EOT\n"
"      <root>\n"
"        <?target0 foo?>\n"
"        <?target1 bar?>\n"
"      </root>\n"
"    EOT\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    instrs = my_doc.root.instructions\n"
"    instrs.frozen?            # => true\n"
"    instrs.map {|i| i.class } # => [REXML::Instruction, REXML::Instruction]\n"
"    instrs.map {|i| i.to_s }  # => [\"<?target0 foo?>\", \"<?target1 bar?>\"]\n"
msgstr ""
"    my_xml = <<-EOT\n"
"      <root>\n"
"        <?target0 foo?>\n"
"        <?target1 bar?>\n"
"      </root>\n"
"    EOT\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    instrs = my_doc.root.instructions\n"
"    instrs.frozen?            # => true\n"
"    instrs.map {|i| i.class } # => [REXML::Instruction, REXML::Instruction]\n"
"    instrs.map {|i| i.to_s }  # => [\"<?target0 foo?>\", \"<?target1 bar?>\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:648
msgid "[Text Children]"
msgstr "[子のテキスト]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:651
#, no-wrap
msgid ""
"  Use method REXML::Element#has_text? to retrieve whether the element\n"
"  has text children:\n"
msgstr "  メソッド REXML::Element#has_text? を使うと要素に子のテキストを持つかどうかが取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:654
#, no-wrap
msgid ""
"    doc.root.has_text?                  # => true\n"
"    REXML::Element.new('foo').has_text? # => false\n"
msgstr ""
"    doc.root.has_text?                  # => true\n"
"    REXML::Element.new('foo').has_text? # => false\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:656
#, no-wrap
msgid "  Use method REXML::Element#texts to retrieve a frozen array of text children:\n"
msgstr "  メソッド REXML::Element#texts を使うと子のテキストの凍結された配列が取得されます。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:663
#, no-wrap
msgid ""
"    my_xml = '<root><a/>text<b/>more<c/></root>'\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    texts = my_doc.root.texts\n"
"    texts.frozen?            # => true\n"
"    texts.map {|t| t.class } # => [REXML::Text, REXML::Text]\n"
"    texts.map {|t| t.to_s }  # => [\"text\", \"more\"]\n"
msgstr ""
"    my_xml = '<root><a/>text<b/>more<c/></root>'\n"
"    my_doc = REXML::Document.new(my_xml)\n"
"    texts = my_doc.root.texts\n"
"    texts.frozen?            # => true\n"
"    texts.map {|t| t.class } # => [REXML::Text, REXML::Text]\n"
"    texts.map {|t| t.to_s }  # => [\"text\", \"more\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:665
msgid "[Parenthood]"
msgstr "[親]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:668
#, no-wrap
msgid ""
"  Use inherited method REXML::Parent.parent? to retrieve whether the element is a parent;\n"
"  always returns +true+; only REXML::Child#parent returns +false+.\n"
msgstr ""
"  継承されたメソッド REXML::Parent.parent? を使うと要素が親かどうかが取得されます。\n"
"  REXML::Child#parent が+false+を返す他は常に+true+を返します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:670
#, no-wrap
msgid "     doc.root.parent? # => true\n"
msgstr "     doc.root.parent? # => true\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:672
msgid "=== Element Attributes"
msgstr "=== 要素の属性"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:675
msgid ""
"Use method REXML::Element#has_attributes? to return whether the element has "
"attributes:"
msgstr ""
"メソッド REXML::Element#has_attributes? を使うと要素に属性があるかが返りま"
"す。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:680
#, no-wrap
msgid ""
"  ele = doc.root           # => <bookstore> ... </>\n"
"  ele.has_attributes?      # => false\n"
"  ele = ele.elements.first # => <book category='cooking'> ... </>\n"
"  ele.has_attributes?      # => true\n"
msgstr ""
"  ele = doc.root           # => <bookstore> ... </>\n"
"  ele.has_attributes?      # => false\n"
"  ele = ele.elements.first # => <book category='cooking'> ... </>\n"
"  ele.has_attributes?      # => true\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:685
msgid ""
"Use method REXML::Element#attributes to return the hash containing the "
"attributes for the element.  Each hash key is a string attribute name; each "
"hash value is an REXML::Attribute object."
msgstr ""
"メソッド REXML::Element#attributes を使うとその要素の属性を含むハッシュが返り"
"ます。\n"
"それぞれのハッシュのキーは文字列の属性名です。\n"
"それぞれのハッシュのバリューは REXML::Attribute オブジェクトです。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:688
#, no-wrap
msgid ""
"  ele = doc.root                  # => <bookstore> ... </>\n"
"  attrs = ele.attributes          # => {}\n"
msgstr ""
"  ele = doc.root                  # => <bookstore> ... </>\n"
"  attrs = ele.attributes          # => {}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:696
#, no-wrap
msgid ""
"  ele = ele.elements.first        # => <book category='cooking'> ... </>\n"
"  attrs = ele.attributes          # => {\"category\"=>category='cooking'}\n"
"  attrs.size                      # => 1\n"
"  attr_name = attrs.keys.first    # => \"category\"\n"
"  attr_name.class                 # => String\n"
"  attr_value = attrs.values.first # => category='cooking'\n"
"  attr_value.class                # => REXML::Attribute\n"
msgstr ""
"  ele = ele.elements.first        # => <book category='cooking'> ... </>\n"
"  attrs = ele.attributes          # => {\"category\"=>category='cooking'}\n"
"  attrs.size                      # => 1\n"
"  attr_name = attrs.keys.first    # => \"category\"\n"
"  attr_name.class                 # => String\n"
"  attr_value = attrs.values.first # => category='cooking'\n"
"  attr_value.class                # => REXML::Attribute\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:699
msgid ""
"Use method REXML::Element#[] to retrieve the string value for a given "
"attribute, which may be given as either a string or a symbol:"
msgstr ""
"メソッド REXML::Element#[] を使うと与えられた属性の文字列値が取得されます。\n"
"属性は文字列ないしシンボルとして与えることができます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:704
#, no-wrap
msgid ""
"  ele = doc.root.elements.first # => <book category='cooking'> ... </>\n"
"  attr_value = ele['category']  # => \"cooking\"\n"
"  attr_value.class              # => String\n"
"  ele['nosuch']                  # => nil\n"
msgstr ""
"  ele = doc.root.elements.first # => <book category='cooking'> ... </>\n"
"  attr_value = ele['category']  # => \"cooking\"\n"
"  attr_value.class              # => String\n"
"  ele['nosuch']                  # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:706
msgid ""
"Use method REXML::Element#attribute to retrieve the value of a named "
"attribute:"
msgstr ""
"メソッド REXML::Element#attribute を使うと名前付き属性の値が取得されます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:711
#, no-wrap
msgid ""
"  my_xml = \"<root xmlns:a='a' a:x='a:x' x='x'/>\"\n"
"  my_doc = REXML::Document.new(my_xml)\n"
"  my_doc.root.attribute(\"x\")      # => x='x'\n"
"  my_doc.root.attribute(\"x\", \"a\") # => a:x='a:x'\n"
msgstr ""
"  my_xml = \"<root xmlns:a='a' a:x='a:x' x='x'/>\"\n"
"  my_doc = REXML::Document.new(my_xml)\n"
"  my_doc.root.attribute(\"x\")      # => x='x'\n"
"  my_doc.root.attribute(\"x\", \"a\") # => a:x='a:x'\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:713
msgid "== Whitespace"
msgstr "== 空白"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:717
msgid ""
"Use method REXML::Element#ignore_whitespace_nodes to determine whether "
"whitespace nodes were ignored when the XML was parsed; returns +true+ if so, "
"+nil+ otherwise."
msgstr ""
"メソッド REXML::Element#ignore_whitespace_nodes を使うとXMLが構文解析されると"
"きに空白のノードが無視されるかどうかが決められます。\n"
"もし無視されるなら+true+を、そうでなければ+nil+を返します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:720
msgid ""
"Use method REXML::Element#whitespace to determine whether whitespace is "
"respected for the element; returns +true+ if so, +false+ otherwise."
msgstr ""
"メソッド REXML::Element#whitespace を使うとその要素で空白が認められているかど"
"うかを見定めます。\n"
"もし認められているなら+true+を、そうでなければ+false+が返ります。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:722
msgid "== Namespaces"
msgstr "== 名前空間"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:725
msgid ""
"Use method REXML::Element#namespace to retrieve the string namespace URI for "
"the element, which may derive from one of its ancestors:"
msgstr ""
"メソッド REXML::Element#namespace を使うとその要素の名前空間URIの文字列が取得"
"されます。\n"
"この名前空間はその先祖の名前空間から導出されることがあります。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:739
#, no-wrap
msgid ""
"  xml_string = <<-EOT\n"
"    <root>\n"
"       <a xmlns='1' xmlns:y='2'>\n"
"         <b/>\n"
"         <c xmlns:z='3'/>\n"
"       </a>\n"
"    </root>\n"
"  EOT\n"
"  d = Document.new(xml_string)\n"
"  b = d.elements['//b']\n"
"  b.namespace      # => \"1\"\n"
"  b.namespace('y') # => \"2\"\n"
"  b.namespace('nosuch') # => nil\n"
msgstr ""
"  xml_string = <<-EOT\n"
"    <root>\n"
"       <a xmlns='1' xmlns:y='2'>\n"
"         <b/>\n"
"         <c xmlns:z='3'/>\n"
"       </a>\n"
"    </root>\n"
"  EOT\n"
"  d = Document.new(xml_string)\n"
"  b = d.elements['//b']\n"
"  b.namespace      # => \"1\"\n"
"  b.namespace('y') # => \"2\"\n"
"  b.namespace('nosuch') # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:742
msgid ""
"Use method REXML::Element#namespaces to retrieve a hash of all defined "
"namespaces in the element and its ancestors:"
msgstr ""
"メソッド REXML::Element#namespaces を使うとその要素とその先祖で定義された全て"
"の名前空間のハッシュが取得されます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:755
#, no-wrap
msgid ""
"  xml_string = <<-EOT\n"
"    <root>\n"
"       <a xmlns:x='1' xmlns:y='2'>\n"
"         <b/>\n"
"         <c xmlns:z='3'/>\n"
"       </a>\n"
"    </root>\n"
"  EOT\n"
"  d = Document.new(xml_string)\n"
"  d.elements['//a'].namespaces # => {\"x\"=>\"1\", \"y\"=>\"2\"}\n"
"  d.elements['//b'].namespaces # => {\"x\"=>\"1\", \"y\"=>\"2\"}\n"
"  d.elements['//c'].namespaces # => {\"x\"=>\"1\", \"y\"=>\"2\", \"z\"=>\"3\"}\n"
msgstr ""
"  xml_string = <<-EOT\n"
"    <root>\n"
"       <a xmlns:x='1' xmlns:y='2'>\n"
"         <b/>\n"
"         <c xmlns:z='3'/>\n"
"       </a>\n"
"    </root>\n"
"  EOT\n"
"  d = Document.new(xml_string)\n"
"  d.elements['//a'].namespaces # => {\"x\"=>\"1\", \"y\"=>\"2\"}\n"
"  d.elements['//b'].namespaces # => {\"x\"=>\"1\", \"y\"=>\"2\"}\n"
"  d.elements['//c'].namespaces # => {\"x\"=>\"1\", \"y\"=>\"2\", \"z\"=>\"3\"}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:758
msgid ""
"Use method REXML::Element#prefixes to retrieve an array of the string "
"prefixes (names)  of all defined namespaces in the element and its ancestors:"
msgstr ""
"メソッド REXML::Element#prefixes を使うとその要素とその先祖で定義された全ての"
"名前空間の文字列前置詞（名前）の配列が取得されます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:771
#, no-wrap
msgid ""
"  xml_string = <<-EOT\n"
"    <root>\n"
"       <a xmlns:x='1' xmlns:y='2'>\n"
"         <b/>\n"
"         <c xmlns:z='3'/>\n"
"       </a>\n"
"    </root>\n"
"  EOT\n"
"  d = Document.new(xml_string, {compress_whitespace: :all})\n"
"  d.elements['//a'].prefixes # => [\"x\", \"y\"]\n"
"  d.elements['//b'].prefixes # => [\"x\", \"y\"]\n"
"  d.elements['//c'].prefixes # => [\"x\", \"y\", \"z\"]\n"
msgstr ""
"  xml_string = <<-EOT\n"
"    <root>\n"
"       <a xmlns:x='1' xmlns:y='2'>\n"
"         <b/>\n"
"         <c xmlns:z='3'/>\n"
"       </a>\n"
"    </root>\n"
"  EOT\n"
"  d = Document.new(xml_string, {compress_whitespace: :all})\n"
"  d.elements['//a'].prefixes # => [\"x\", \"y\"]\n"
"  d.elements['//b'].prefixes # => [\"x\", \"y\"]\n"
"  d.elements['//c'].prefixes # => [\"x\", \"y\", \"z\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:773
msgid "== Traversing"
msgstr "== 巡回"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:776
msgid ""
"You can use certain methods to traverse children of the element.  Each child "
"that meets given criteria is yielded to the given block."
msgstr ""
"特定のメソッドを使うと要素の子を巡回できます。\n"
"与えられた条件に合うそれぞれの子は与えられたブロックにyieldされます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:778
msgid "[Traverse All Children]"
msgstr "[全ての子を巡回する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:781
#, no-wrap
msgid ""
"  Use inherited method REXML::Parent#each (or its alias #each_child) to traverse\n"
"  all children of the element:\n"
msgstr "  継承されたメソッド REXML::Parent#each （またはその別称である #each_child ）を使うとその要素の全ての子を巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:783
#, no-wrap
msgid "    doc.root.each {|child| p [child.class, child] }\n"
msgstr "    doc.root.each {|child| p [child.class, child] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:797
msgid "[Traverse Element Children]"
msgstr "[要素な子を巡回する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:800
#, no-wrap
msgid ""
"  Use method REXML::Element#each_element to traverse only the element children\n"
"  of the element:\n"
msgstr "  メソッド REXML::Element#each_element を使うとその要素の要素な子のみを巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:802
#, no-wrap
msgid "    doc.root.each_element {|e| p [e.class, e] }\n"
msgstr "    doc.root.each_element {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:811
msgid "[Traverse Element Children with Attribute]"
msgstr "[要素な子を属性付きで巡回する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:814
#, no-wrap
msgid ""
"  Use method REXML::Element#each_element_with_attribute with the single argument\n"
"  +attr_name+ to traverse each element child that has the given attribute:\n"
msgstr "  メソッド REXML::Element#each_element_with_attribute を単一の引数+attr_name+を使うと、与えられた属性を持つ要素な子を順に巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:817
#, no-wrap
msgid ""
"    my_doc = Document.new '<a><b id=\"1\"/><c id=\"2\"/><d id=\"1\"/><e/></a>'\n"
"    my_doc.root.each_element_with_attribute('id') {|e| p [e.class, e] }\n"
msgstr ""
"    my_doc = Document.new '<a><b id=\"1\"/><c id=\"2\"/><d id=\"1\"/><e/></a>'\n"
"    my_doc.root.each_element_with_attribute('id') {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:823
#, no-wrap
msgid ""
"    [REXML::Element, <b id='1'/>]\n"
"    [REXML::Element, <c id='2'/>]\n"
"    [REXML::Element, <d id='1'/>]\n"
msgstr ""
"    [REXML::Element, <b id='1'/>]\n"
"    [REXML::Element, <c id='2'/>]\n"
"    [REXML::Element, <d id='1'/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:826
#, no-wrap
msgid ""
"  Use the same method with a second argument +value+ to traverse\n"
"  each element child element that has the given attribute and value:\n"
msgstr "  2つ目の引数+value+付きで同じメソッドを使うと与えられた属性とバリューを持つ要素の子要素を順に巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:828
#, no-wrap
msgid "    my_doc.root.each_element_with_attribute('id', '1') {|e| p [e.class, e] }\n"
msgstr "    my_doc.root.each_element_with_attribute('id', '1') {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:833
#, no-wrap
msgid ""
"    [REXML::Element, <b id='1'/>]\n"
"    [REXML::Element, <d id='1'/>]\n"
msgstr ""
"    [REXML::Element, <b id='1'/>]\n"
"    [REXML::Element, <d id='1'/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:836
#, no-wrap
msgid ""
"  Use the same method with a third argument +max+ to traverse\n"
"  no more than the given number of element children:\n"
msgstr "  3つ目の引数+max+付きで同じメソッドを使うと、与えられた数を越えない分の要素な子を巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:838
#, no-wrap
msgid "    my_doc.root.each_element_with_attribute('id', '1', 1) {|e| p [e.class, e] }\n"
msgstr "    my_doc.root.each_element_with_attribute('id', '1', 1) {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:842
#, no-wrap
msgid "    [REXML::Element, <b id='1'/>]\n"
msgstr "    [REXML::Element, <b id='1'/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:845
#, no-wrap
msgid ""
"  Use the same method with a fourth argument +xpath+ to traverse\n"
"  only those element children that match the given xpath:\n"
msgstr "  4つ目の引数+xpath+付きで同じメソッドを使うと与えられたxpathに照合する要素な子のみを巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:847
#, no-wrap
msgid "    my_doc.root.each_element_with_attribute('id', '1', 2, '//d') {|e| p [e.class, e] }\n"
msgstr "    my_doc.root.each_element_with_attribute('id', '1', 2, '//d') {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:851
#, no-wrap
msgid "    [REXML::Element, <d id='1'/>]\n"
msgstr "    [REXML::Element, <d id='1'/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:853
msgid "[Traverse Element Children with Text]"
msgstr "[テキスト付きの要素な子を巡回する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:856
#, no-wrap
msgid ""
"  Use method REXML::Element#each_element_with_text with no arguments\n"
"  to traverse those element children that have text:\n"
msgstr "  引数なしでメソッド REXML::Element#each_element_with_text を使うとテキストを持つ要素な子を巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:859
#, no-wrap
msgid ""
"    my_doc = Document.new '<a><b>b</b><c>b</c><d>d</d><e/></a>'\n"
"    my_doc.root.each_element_with_text {|e| p [e.class, e] }\n"
msgstr ""
"    my_doc = Document.new '<a><b>b</b><c>b</c><d>d</d><e/></a>'\n"
"    my_doc.root.each_element_with_text {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:865
#, no-wrap
msgid ""
"    [REXML::Element, <b> ... </>]\n"
"    [REXML::Element, <c> ... </>]\n"
"    [REXML::Element, <d> ... </>]\n"
msgstr ""
"    [REXML::Element, <b> ... </>]\n"
"    [REXML::Element, <c> ... </>]\n"
"    [REXML::Element, <d> ... </>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:868
#, no-wrap
msgid ""
"  Use the same method with the single argument +text+ to traverse\n"
"  those element children that have exactly that text:\n"
msgstr "  単一の引数+text+で同じメソッドを使うと厳密にそのテキストを持つ要素な子を巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:870
#, no-wrap
msgid "    my_doc.root.each_element_with_text('b') {|e| p [e.class, e] }\n"
msgstr "    my_doc.root.each_element_with_text('b') {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:875
#, no-wrap
msgid ""
"    [REXML::Element, <b> ... </>]\n"
"    [REXML::Element, <c> ... </>]\n"
msgstr ""
"    [REXML::Element, <b> ... </>]\n"
"    [REXML::Element, <c> ... </>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:878
#, no-wrap
msgid ""
"  Use the same method with additional second argument +max+ to traverse\n"
"  no more than the given number of element children:\n"
msgstr "  さらに2つ目の引数+max+付きで同じメソッドを使うと与えられた数を越えない要素な子を巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:880
#, no-wrap
msgid "    my_doc.root.each_element_with_text('b', 1) {|e| p [e.class, e] }\n"
msgstr "    my_doc.root.each_element_with_text('b', 1) {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:884
#, no-wrap
msgid "    [REXML::Element, <b> ... </>]\n"
msgstr "    [REXML::Element, <b> ... </>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:887
#, no-wrap
msgid ""
"  Use the same method with additional third argument +xpath+ to traverse\n"
"  only those element children that also match the given xpath:\n"
msgstr "  さらに3つ目の引数+xpath+付きで同じメソッドを使うと、与えられたxpathにも照合する要素な子のみを巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:889
#, no-wrap
msgid "    my_doc.root.each_element_with_text('b', 2, '//c') {|e| p [e.class, e] }\n"
msgstr "    my_doc.root.each_element_with_text('b', 2, '//c') {|e| p [e.class, e] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:893
#, no-wrap
msgid "    [REXML::Element, <c> ... </>]\n"
msgstr "    [REXML::Element, <c> ... </>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:895
msgid "[Traverse Element Children's Indexes]"
msgstr "[要素な子のインデックスを巡回する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:898
#, no-wrap
msgid ""
"  Use inherited method REXML::Parent#each_index to traverse all children's indexes\n"
"  (not just those of element children):\n"
msgstr "  継承されたメソッド REXML::Parent#each_index を使うと（要素の子のものだけではなく）全ての要素のインデックスを巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:900
#, no-wrap
msgid "    doc.root.each_index {|i| print i }\n"
msgstr "    doc.root.each_index {|i| print i }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:904
#, no-wrap
msgid "    012345678\n"
msgstr "    012345678\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:906
msgid "[Traverse Children Recursively]"
msgstr "[子を再帰的に巡回する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:908
#, no-wrap
msgid "  Use included method REXML::Node#each_recursive to traverse all children recursively:\n"
msgstr "  インクルードされたメソッド REXML::Node#each_recursive を使うと全ての子を再帰的に巡回します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:910
#, no-wrap
msgid "    doc.root.each_recursive {|child| p [child.class, child] }\n"
msgstr "    doc.root.each_recursive {|child| p [child.class, child] }\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:937
#, no-wrap
msgid ""
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"
msgstr ""
"    [REXML::Element, <book category='cooking'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"
"    [REXML::Element, <book category='children'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"
"    [REXML::Element, <book category='web'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"
"    [REXML::Element, <book category='web' cover='paperback'> ... </>]\n"
"    [REXML::Element, <title lang='en'> ... </>]\n"
"    [REXML::Element, <author> ... </>]\n"
"    [REXML::Element, <year> ... </>]\n"
"    [REXML::Element, <price> ... </>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:939
msgid "== Searching"
msgstr "== 検索"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:941
msgid ""
"You can use certain methods to search among the descendants of an element."
msgstr "要素の子孫から検索するメソッドがあり、使えます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:944
msgid ""
"Use method REXML::Element#get_elements to retrieve all element children of "
"the element that match the given +xpath+:"
msgstr ""
"メソッド REXML::Element#get_elements を使い、与えられた+xpath+に照合する要素"
"の全ての要素な子を取得できます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:954
#, no-wrap
msgid ""
"  xml_string = <<-EOT\n"
"  <root>\n"
"    <a level='1'>\n"
"      <a level='2'/>\n"
"    </a>\n"
"  </root>\n"
"  EOT\n"
"  d = Document.new(xml_string)\n"
"  d.root.get_elements('//a') # => [<a level='1'> ... </>, <a level='2'/>]\n"
msgstr ""
"  xml_string = <<-EOT\n"
"  <root>\n"
"    <a level='1'>\n"
"      <a level='2'/>\n"
"    </a>\n"
"  </root>\n"
"  EOT\n"
"  d = Document.new(xml_string)\n"
"  d.root.get_elements('//a') # => [<a level='1'> ... </>, <a level='2'/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:957
msgid ""
"Use method REXML::Element#get_text with no argument to retrieve the first "
"text node in the first child:"
msgstr ""
"引数なしでメソッド  REXML::Element#get_text を使うと、最初の子の最初のテキス"
"トノードを取得します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:962
#, no-wrap
msgid ""
"  my_doc = Document.new \"<p>some text <b>this is bold!</b> more text</p>\"\n"
"  text_node = my_doc.root.get_text\n"
"  text_node.class # => REXML::Text\n"
"  text_node.to_s  # => \"some text \"\n"
msgstr ""
"  my_doc = Document.new \"<p>some text <b>this is bold!</b> more text</p>\"\n"
"  text_node = my_doc.root.get_text\n"
"  text_node.class # => REXML::Text\n"
"  text_node.to_s  # => \"some text \"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:965
msgid ""
"Use the same method with argument +xpath+ to retrieve the first text node in "
"the first child that matches the xpath:"
msgstr ""
"同じメソッドを引数+xpath+付きで使うと、xpathに照合する最初の子にある最初のテ"
"キストを取得します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:967
#, no-wrap
msgid "  my_doc.root.get_text(1) # => \"this is bold!\"\n"
msgstr "  my_doc.root.get_text(1) # => \"this is bold!\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:970
msgid ""
"Use method REXML::Element#text with no argument to retrieve the text from "
"the first text node in the first child:"
msgstr ""
"メソッド REXML::Element#text を引数なしで使うと、最初の子の最初のテキストノー"
"ドからテキストを取得します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:975
#, no-wrap
msgid ""
"  my_doc = Document.new \"<p>some text <b>this is bold!</b> more text</p>\"\n"
"  text_node = my_doc.root.text\n"
"  text_node.class # => String\n"
"  text_node       # => \"some text \"\n"
msgstr ""
"  my_doc = Document.new \"<p>some text <b>this is bold!</b> more text</p>\"\n"
"  text_node = my_doc.root.text\n"
"  text_node.class # => String\n"
"  text_node       # => \"some text \"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:978
msgid ""
"Use the same method with argument +xpath+ to retrieve the text from the "
"first text node in the first child that matches the xpath:"
msgstr ""
"同じメソッドを引数+xpath+付きで使うと、xpathに照合する最初の子の最初のテキス"
"トノードからテキストを取得します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:980
#, no-wrap
msgid "  my_doc.root.text(1) # => \"this is bold!\"\n"
msgstr "  my_doc.root.text(1) # => \"this is bold!\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:984
msgid ""
"Use included method REXML::Node#find_first_recursive to retrieve the first "
"descendant element for which the given block returns a truthy value, or "
"+nil+ if none:"
msgstr ""
"インクルードされたメソッド REXML::Node#find_first_recursive を使うと、与えら"
"れたブロックが真値を返すようなものがあれば最初の子孫の要素を取得します。\n"
"もし何も無ければ+nil+を返します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:991
#, no-wrap
msgid ""
"  doc.root.find_first_recursive do |ele|\n"
"    ele.name == 'price'\n"
"  end # => <price> ... </>\n"
"  doc.root.find_first_recursive do |ele|\n"
"    ele.name == 'nosuch'\n"
"  end # => nil\n"
msgstr ""
"  doc.root.find_first_recursive do |ele|\n"
"    ele.name == 'price'\n"
"  end # => <price> ... </>\n"
"  doc.root.find_first_recursive do |ele|\n"
"    ele.name == 'nosuch'\n"
"  end # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:993
msgid "== Editing"
msgstr "== 編集"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:995
msgid "=== Editing a Document"
msgstr "=== 文書を編集する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:997
msgid "[Creating a Document]"
msgstr "[文書を作成する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:999
#, no-wrap
msgid "  Create a new document with method REXML::Document::new:\n"
msgstr "  REXML::Document::new メソッドで新しい文書を作成します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1002
#, no-wrap
msgid ""
"    doc = Document.new(source_string)\n"
"    empty_doc = REXML::Document.new\n"
msgstr ""
"    doc = Document.new(source_string)\n"
"    empty_doc = REXML::Document.new\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1004
msgid "[Adding to the Document]"
msgstr "[文書に追加する]"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1007
#, no-wrap
msgid ""
"  Add an XML declaration with method REXML::Document#add\n"
"  and an argument of type REXML::XMLDecl:\n"
msgstr "  メソッド REXML::Document#add と型が REXML::XMLDecl の引数でXML宣言を追加します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1012
#, no-wrap
msgid ""
"    my_doc = Document.new\n"
"    my_doc.xml_decl.to_s # => \"\"\n"
"    my_doc.add(XMLDecl.new('2.0'))\n"
"    my_doc.xml_decl.to_s # => \"<?xml version='2.0'?>\"\n"
msgstr ""
"    my_doc = Document.new\n"
"    my_doc.xml_decl.to_s # => \"\"\n"
"    my_doc.add(XMLDecl.new('2.0'))\n"
"    my_doc.xml_decl.to_s # => \"<?xml version='2.0'?>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1015
#, no-wrap
msgid ""
"  Add a document type with method REXML::Document#add\n"
"  and an argument of type REXML::DocType:\n"
msgstr "  メソッド REXML::Document#add と型が REXML::DocType の引数で文書種別を追加します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1020
#, no-wrap
msgid ""
"    my_doc = Document.new\n"
"    my_doc.doctype.to_s # => \"\"\n"
"    my_doc.add(DocType.new('foo'))\n"
"    my_doc.doctype.to_s # => \"<!DOCTYPE foo>\"\n"
msgstr ""
"    my_doc = Document.new\n"
"    my_doc.doctype.to_s # => \"\"\n"
"    my_doc.add(DocType.new('foo'))\n"
"    my_doc.doctype.to_s # => \"<!DOCTYPE foo>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1023
#, no-wrap
msgid ""
"  Add a node of any other REXML type with method REXML::Document#add and an argument\n"
"  that is not of type REXML::XMLDecl or REXML::DocType:\n"
msgstr "  REXML::Document#add と型が REXML::XMLDecl でも REXML::DocType でもない引数でその他のREXMLの型のノードを追加します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1027
#, no-wrap
msgid ""
"    my_doc = Document.new\n"
"    my_doc.add(Element.new('foo'))\n"
"    my_doc.to_s # => \"<foo/>\"\n"
msgstr ""
"    my_doc = Document.new\n"
"    my_doc.add(Element.new('foo'))\n"
"    my_doc.to_s # => \"<foo/>\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1029
#, no-wrap
msgid "  Add an existing element as the root element with method REXML::Document#add_element:\n"
msgstr "  メソッド REXML::Document#add_element で既存の要素をルート要素として追加します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1034
#, no-wrap
msgid ""
"    ele = Element.new('foo')\n"
"    my_doc = Document.new\n"
"    my_doc.add_element(ele)\n"
"    my_doc.root # => <foo/>\n"
msgstr ""
"    ele = Element.new('foo')\n"
"    my_doc = Document.new\n"
"    my_doc.add_element(ele)\n"
"    my_doc.root # => <foo/>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1036
#, no-wrap
msgid "  Create and add an element as the root element with method REXML::Document#add_element:\n"
msgstr "  メソッド REXML::Document#add_element で要素をルート要素として作成し追加します。\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1040
#, no-wrap
msgid ""
"    my_doc = Document.new\n"
"    my_doc.add_element('foo')\n"
"    my_doc.root # => <foo/>\n"
msgstr ""
"    my_doc = Document.new\n"
"    my_doc.add_element('foo')\n"
"    my_doc.root # => <foo/>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1042
msgid "=== Editing an Element"
msgstr "=== 要素を編集する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1044
msgid "==== Creating an Element"
msgstr "==== 要素を作成する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1046
msgid "Create a new element with method REXML::Element::new:"
msgstr "メソッド REXML::Element::new で新しい要素を作成します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1048
#, no-wrap
msgid "  ele = Element.new('foo') # => <foo/>\n"
msgstr "  ele = Element.new('foo') # => <foo/>\n"

# ここでのpropertyはattributeではないので属性とは訳せません
#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1050
msgid "==== Setting Element Properties"
msgstr "==== 要素のプロパティを設定する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1053
msgid ""
"Set the context for an element with method REXML::Element#context= (see "
"{Element Context}[../context_rdoc.html]):"
msgstr ""
"メソッド REXML::Element#context= で要素に文脈を設定します（{要素の文脈}[../"
"context_rdoc.html]を参照）。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1057
#, no-wrap
msgid ""
"  ele.context # => nil\n"
"  ele.context = {ignore_whitespace_nodes: :all}\n"
"  ele.context # => {:ignore_whitespace_nodes=>:all}\n"
msgstr ""
"  ele.context # => nil\n"
"  ele.context = {ignore_whitespace_nodes: :all}\n"
"  ele.context # => {:ignore_whitespace_nodes=>:all}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1059
msgid ""
"Set the parent for an element with inherited method REXML::Child#parent="
msgstr "継承されたメソッド REXML::Child#parent= で要素の親を設定します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1063
#, no-wrap
msgid ""
"  ele.parent # => nil\n"
"  ele.parent = Element.new('bar')\n"
"  ele.parent # => <bar/>\n"
msgstr ""
"  ele.parent # => nil\n"
"  ele.parent = Element.new('bar')\n"
"  ele.parent # => <bar/>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1065
msgid "Set the text for an element with method REXML::Element#text=:"
msgstr "メソッド REXML::Element#text= で要素にテキストを設定します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1069
#, no-wrap
msgid ""
"  ele.text # => nil\n"
"  ele.text = 'bar'\n"
"  ele.text # => \"bar\"\n"
msgstr ""
"  ele.text # => nil\n"
"  ele.text = 'bar'\n"
"  ele.text # => \"bar\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1071
msgid "==== Adding to an Element"
msgstr "==== 要素に追加する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1073
msgid ""
"Add a node as the last child with inherited method REXML::Parent#add (or its "
"alias #push):"
msgstr ""
"継承されたメソッド REXML::Parent#add （または別称の #push ）で最後の子として"
"ノードを追加します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1078
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.push(Text.new('bar'))\n"
"  ele.push(Element.new('baz'))\n"
"  ele.children # => [\"bar\", <baz/>]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.push(Text.new('bar'))\n"
"  ele.push(Element.new('baz'))\n"
"  ele.children # => [\"bar\", <baz/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1080
msgid ""
"Add a node as the first child with inherited method REXML::Parent#unshift:"
msgstr ""
"継承されたメソッド REXML::Parent#unshift で最初の子としてノードを追加します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1085
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.unshift(Element.new('bar'))\n"
"  ele.unshift(Text.new('baz'))\n"
"  ele.children # => [\"bar\", <baz/>]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.unshift(Element.new('bar'))\n"
"  ele.unshift(Text.new('baz'))\n"
"  ele.children # => [\"bar\", <baz/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1087
msgid ""
"Add an element as the last child with method REXML::Element#add_element:"
msgstr "メソッド REXML::Element#add_element で最後の子として要素を追加します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1092
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_element(Element.new('baz'))\n"
"  ele.children # => [<bar/>, <baz/>]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_element(Element.new('baz'))\n"
"  ele.children # => [<bar/>, <baz/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1094
msgid "Add a text node as the last child with method REXML::Element#add_text:"
msgstr ""
"メソッド REXML::Element#add_text で最後の子としてテキストノードを追加します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1099
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_text('bar')\n"
"  ele.add_text(Text.new('baz'))\n"
"  ele.children # => [\"bar\", \"baz\"]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_text('bar')\n"
"  ele.add_text(Text.new('baz'))\n"
"  ele.children # => [\"bar\", \"baz\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1101
msgid ""
"Insert a node before a given node with method REXML::Parent#insert_before:"
msgstr ""
"メソッド REXML::Parent#insert_before で与えられたノードの前にノードを挿入しま"
"す。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1109
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_text('bar')\n"
"  ele.add_text(Text.new('baz'))\n"
"  ele.children    # => [\"bar\", \"baz\"]\n"
"  target = ele[1] # => \"baz\"\n"
"  ele.insert_before(target, Text.new('bat'))\n"
"  ele.children    # => [\"bar\", \"bat\", \"baz\"]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_text('bar')\n"
"  ele.add_text(Text.new('baz'))\n"
"  ele.children    # => [\"bar\", \"baz\"]\n"
"  target = ele[1] # => \"baz\"\n"
"  ele.insert_before(target, Text.new('bat'))\n"
"  ele.children    # => [\"bar\", \"bat\", \"baz\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1111
msgid ""
"Insert a node after a given node with method REXML::Parent#insert_after:"
msgstr ""
"メソッド REXML::Parent#insert_after で与えられたノードの後にノードを挿入しま"
"す。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1119
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_text('bar')\n"
"  ele.add_text(Text.new('baz'))\n"
"  ele.children    # => [\"bar\", \"baz\"]\n"
"  target = ele[0] # => \"bar\"\n"
"  ele.insert_after(target, Text.new('bat'))\n"
"  ele.children    # => [\"bar\", \"bat\", \"baz\"]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_text('bar')\n"
"  ele.add_text(Text.new('baz'))\n"
"  ele.children    # => [\"bar\", \"baz\"]\n"
"  target = ele[0] # => \"bar\"\n"
"  ele.insert_after(target, Text.new('bat'))\n"
"  ele.children    # => [\"bar\", \"bat\", \"baz\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1121
msgid "Add an attribute with method REXML::Element#add_attribute:"
msgstr "メソッド REXML::Element#add_attribute で属性を追加します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1126
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_attribute('bar', 'baz')\n"
"  ele.add_attribute(Attribute.new('bat', 'bam'))\n"
"  ele.attributes # => {\"bar\"=>bar='baz', \"bat\"=>bat='bam'}\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_attribute('bar', 'baz')\n"
"  ele.add_attribute(Attribute.new('bat', 'bam'))\n"
"  ele.attributes # => {\"bar\"=>bar='baz', \"bat\"=>bat='bam'}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1128
msgid "Add multiple attributes with method REXML::Element#add_attributes:"
msgstr "メソッド REXML::Element#add_attributes で複数の属性を追加します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1133
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_attributes({'bar' => 'baz', 'bat' => 'bam'})\n"
"  ele.add_attributes([['ban', 'bap'], ['bah', 'bad']])\n"
"  ele.attributes # => {\"bar\"=>bar='baz', \"bat\"=>bat='bam', \"ban\"=>ban='bap', \"bah\"=>bah='bad'}\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_attributes({'bar' => 'baz', 'bat' => 'bam'})\n"
"  ele.add_attributes([['ban', 'bap'], ['bah', 'bad']])\n"
"  ele.attributes # => {\"bar\"=>bar='baz', \"bat\"=>bat='bam', \"ban\"=>ban='bap', \"bah\"=>bah='bad'}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1135
msgid "Add a namespace with method REXML::Element#add_namespace:"
msgstr "メソッド REXML::Element#add_namespace で名前空間を追加します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1140
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_namespace('bar')\n"
"  ele.add_namespace('baz', 'bat')\n"
"  ele.namespaces # => {\"xmlns\"=>\"bar\", \"baz\"=>\"bat\"}\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_namespace('bar')\n"
"  ele.add_namespace('baz', 'bat')\n"
"  ele.namespaces # => {\"xmlns\"=>\"bar\", \"baz\"=>\"bat\"}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1142
msgid "==== Deleting from an Element"
msgstr "==== 要素から削除する"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1144
msgid ""
"Delete a specific child object with inherited method REXML::Parent#delete:"
msgstr ""
"継承されたメソッド REXML::Parent#delete で特定の子オブジェクトを削除します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1155
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.children             # => [<bar/>, \"baz\"]\n"
"  target = ele[1]          # => \"baz\"\n"
"  ele.delete(target)       # => \"baz\"\n"
"  ele.children             # => [<bar/>]\n"
"  target = ele[0]          # => <baz/>\n"
"  ele.delete(target)       # => <baz/>\n"
"  ele.children             # => []\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.children             # => [<bar/>, \"baz\"]\n"
"  target = ele[1]          # => \"baz\"\n"
"  ele.delete(target)       # => \"baz\"\n"
"  ele.children             # => [<bar/>]\n"
"  target = ele[0]          # => <baz/>\n"
"  ele.delete(target)       # => <baz/>\n"
"  ele.children             # => []\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1157
msgid ""
"Delete a child at a specific index with inherited method REXML::"
"Parent#delete_at:"
msgstr ""
"継承されたメソッド REXML::Parent#delete_at で特定のインデックスにある子を削除"
"します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1166
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.children             # => [<bar/>, \"baz\"]\n"
"  ele.delete_at(1)\n"
"  ele.children             # => [<bar/>]\n"
"  ele.delete_at(0)\n"
"  ele.children             # => []\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.children             # => [<bar/>, \"baz\"]\n"
"  ele.delete_at(1)\n"
"  ele.children             # => [<bar/>]\n"
"  ele.delete_at(0)\n"
"  ele.children             # => []\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1169
msgid ""
"Delete all children meeting a specified criterion with inherited method "
"REXML::Parent#delete_if:"
msgstr ""
"継承されたメソッド REXML::Parent#delete_if で特定の条件に合う全ての子を削除し"
"ます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1178
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele.delete_if {|child| child.instance_of?(Text) }\n"
"  ele.children # => [<bar/>, <bat/>]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele.delete_if {|child| child.instance_of?(Text) }\n"
"  ele.children # => [<bar/>, <bat/>]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1180
msgid ""
"Delete an element at a specific 1-based index with method REXML::"
"Element#delete_element:"
msgstr ""
"メソッド REXML::Element#delete_element で1起点で指定されたインデックスにある"
"要素を削除します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1191
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele.delete_element(2)    # => <bat/>\n"
"  ele.children             # => [<bar/>, \"baz\", \"bam\"]\n"
"  ele.delete_element(1)    # => <bar/>\n"
"  ele.children             # => [\"baz\", \"bam\"]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele.delete_element(2)    # => <bat/>\n"
"  ele.children             # => [<bar/>, \"baz\", \"bam\"]\n"
"  ele.delete_element(1)    # => <bar/>\n"
"  ele.children             # => [\"baz\", \"bam\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1193
msgid "Delete a specific element with the same method:"
msgstr "同じメソッドで指定された要素を削除します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1203
#, no-wrap
msgid ""
"  ele = Element.new('foo')   # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children               # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  target = ele.elements[2]   # => <bat/>\n"
"  ele.delete_element(target) # => <bat/>\n"
"  ele.children               # => [<bar/>, \"baz\", \"bam\"]\n"
msgstr ""
"  ele = Element.new('foo')   # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children               # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  target = ele.elements[2]   # => <bat/>\n"
"  ele.delete_element(target) # => <bat/>\n"
"  ele.children               # => [<bar/>, \"baz\", \"bam\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1205
msgid "Delete an element matching an xpath using the same method:"
msgstr "同じメソッドを使ってxpathに照合する要素を削除します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1216
#, no-wrap
msgid ""
"  ele = Element.new('foo')    # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children                # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele.delete_element('./bat') # => <bat/>\n"
"  ele.children                # => [<bar/>, \"baz\", \"bam\"]\n"
"  ele.delete_element('./bar') # => <bar/>\n"
"  ele.children                # => [\"baz\", \"bam\"]\n"
msgstr ""
"  ele = Element.new('foo')    # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children                # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele.delete_element('./bat') # => <bat/>\n"
"  ele.children                # => [<bar/>, \"baz\", \"bam\"]\n"
"  ele.delete_element('./bar') # => <bar/>\n"
"  ele.children                # => [\"baz\", \"bam\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1218
msgid ""
"Delete an attribute by name with method REXML::Element#delete_attribute:"
msgstr ""
"メソッド REXML::Element#delete_attribute で名前により属性を削除します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1224
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_attributes({'bar' => 'baz', 'bam' => 'bat'})\n"
"  ele.attributes           # => {\"bar\"=>bar='baz', \"bam\"=>bam='bat'}\n"
"  ele.delete_attribute('bam')\n"
"  ele.attributes           # => {\"bar\"=>bar='baz'}\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_attributes({'bar' => 'baz', 'bam' => 'bat'})\n"
"  ele.attributes           # => {\"bar\"=>bar='baz', \"bam\"=>bam='bat'}\n"
"  ele.delete_attribute('bam')\n"
"  ele.attributes           # => {\"bar\"=>bar='baz'}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1226
msgid "Delete a namespace with method REXML::Element#delete_namespace:"
msgstr "メソッド REXML::Element#delete_namespace で名前空間を削除します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1235
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_namespace('bar')\n"
"  ele.add_namespace('baz', 'bat')\n"
"  ele.namespaces           # => {\"xmlns\"=>\"bar\", \"baz\"=>\"bat\"}\n"
"  ele.delete_namespace('xmlns')\n"
"  ele.namespaces           # => {} # => {\"baz\"=>\"bat\"}\n"
"  ele.delete_namespace('baz')\n"
"  ele.namespaces # => {}   # => {}\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_namespace('bar')\n"
"  ele.add_namespace('baz', 'bat')\n"
"  ele.namespaces           # => {\"xmlns\"=>\"bar\", \"baz\"=>\"bat\"}\n"
"  ele.delete_namespace('xmlns')\n"
"  ele.namespaces           # => {} # => {\"baz\"=>\"bat\"}\n"
"  ele.delete_namespace('baz')\n"
"  ele.namespaces # => {}   # => {}\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1237
msgid ""
"Remove an element from its parent with inherited method REXML::Child#remove:"
msgstr "継承されたメソッド REXML::Child#remove で親から要素を削除します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1244
#, no-wrap
msgid ""
"  ele = Element.new('foo')    # => <foo/>\n"
"  parent = Element.new('bar') # => <bar/>\n"
"  parent.add_element(ele)     # => <foo/>\n"
"  parent.children.size        # => 1\n"
"  ele.remove                  # => <foo/>\n"
"  parent.children.size        # => 0\n"
msgstr ""
"  ele = Element.new('foo')    # => <foo/>\n"
"  parent = Element.new('bar') # => <bar/>\n"
"  parent.add_element(ele)     # => <foo/>\n"
"  parent.children.size        # => 1\n"
"  ele.remove                  # => <foo/>\n"
"  parent.children.size        # => 0\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1246
msgid "==== Replacing Nodes"
msgstr "==== ノードを入れ替える"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1248
msgid ""
"Replace the node at a given 0-based index with inherited method REXML::"
"Parent#[]=:"
msgstr ""
"継承されたメソッド REXML::Parent#[]= で、与えられた0起点のインデックスにある"
"ノードを入れ替えます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1257
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele[2] = Text.new('bad') # => \"bad\"\n"
"  ele.children             # => [<bar/>, \"baz\", \"bad\", \"bam\"]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  ele[2] = Text.new('bad') # => \"bad\"\n"
"  ele.children             # => [<bar/>, \"baz\", \"bad\", \"bam\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1259
msgid ""
"Replace a given node with another node with inherited method REXML::"
"Parent#replace_child:"
msgstr ""
"継承されたメソッド REXML::Parent#replace_child で、与えられたノードを他のノー"
"ドで入れ替えます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1269
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  target = ele[2]          # => <bat/>\n"
"  ele.replace_child(target, Text.new('bah'))\n"
"  ele.children             # => [<bar/>, \"baz\", \"bah\", \"bam\"]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  target = ele[2]          # => <bat/>\n"
"  ele.replace_child(target, Text.new('bah'))\n"
"  ele.children             # => [<bar/>, \"baz\", \"bah\", \"bam\"]\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1271
msgid ""
"Replace +self+ with a given node with inherited method REXML::"
"Child#replace_with:"
msgstr ""
"継承されたメソッド REXML::Child#replace_with で与えられたノードで +self+ を入"
"れ替えます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1281
#, no-wrap
msgid ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  target = ele[2]          # => <bat/>\n"
"  target.replace_with(Text.new('bah'))\n"
"  ele.children             # => [<bar/>, \"baz\", \"bah\", \"bam\"]\n"
msgstr ""
"  ele = Element.new('foo') # => <foo/>\n"
"  ele.add_element('bar')\n"
"  ele.add_text('baz')\n"
"  ele.add_element('bat')\n"
"  ele.add_text('bam')\n"
"  ele.children             # => [<bar/>, \"baz\", <bat/>, \"bam\"]\n"
"  target = ele[2]          # => <bat/>\n"
"  target.replace_with(Text.new('bah'))\n"
"  ele.children             # => [<bar/>, \"baz\", \"bah\", \"bam\"]\n"

# 以降、複製とは訳しません。
# コピーとクローンの使い分けがされている可能性があるからです。
#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1283
msgid "=== Cloning"
msgstr "=== クローン"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1286
msgid ""
"Create a shallow clone of an element with method REXML::Element#clone.  The "
"clone contains the name and attributes, but not the parent or children:"
msgstr ""
"メソッド REXML::Element#clone で浅いクローンを作成します。\n"
"クローンには名前と属性が含まれますが、親と子は含まれません。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1290
#, no-wrap
msgid ""
"  ele = Element.new('foo')\n"
"  ele.add_attributes({'bar' => 0, 'baz' => 1})\n"
"  ele.clone # => <foo bar='0' baz='1'/>\n"
msgstr ""
"  ele = Element.new('foo')\n"
"  ele.add_attributes({'bar' => 0, 'baz' => 1})\n"
"  ele.clone # => <foo bar='0' baz='1'/>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1293
msgid ""
"Create a shallow clone of a document with method REXML::Document#clone.  The "
"XML declaration is copied; the document type and root element are not cloned:"
msgstr ""
"メソッド REXML::Document#clone で文書の浅いクローンを作成します。\n"
"XML宣言はコピーされます。\n"
"文書種別と根要素はクローンされません。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1297
#, no-wrap
msgid ""
"  my_xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo><root/>'\n"
"  my_doc = Document.new(my_xml)\n"
"  clone_doc = my_doc.clone\n"
msgstr ""
"  my_xml = '<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE foo><root/>'\n"
"  my_doc = Document.new(my_xml)\n"
"  clone_doc = my_doc.clone\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1300
#, no-wrap
msgid ""
"  my_doc.xml_decl         # => <?xml ... ?>\n"
"  clone_doc.xml_decl      # => <?xml ... ?>\n"
msgstr ""
"  my_doc.xml_decl         # => <?xml ... ?>\n"
"  clone_doc.xml_decl      # => <?xml ... ?>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1303
#, no-wrap
msgid ""
"  my_doc.doctype.to_s     # => \"<?xml version='1.0' encoding='UTF-8'?>\"\n"
"  clone_doc.doctype.to_s  # => \"\"\n"
msgstr ""
"  my_doc.doctype.to_s     # => \"<?xml version='1.0' encoding='UTF-8'?>\"\n"
"  clone_doc.doctype.to_s  # => \"\"\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1306
#, no-wrap
msgid ""
"  my_doc.root             # => <root/>\n"
"  clone_doc.root          # => nil\n"
msgstr ""
"  my_doc.root             # => <root/>\n"
"  clone_doc.root          # => nil\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1309
msgid ""
"Create a deep clone of an element with inherited method REXML::"
"Parent#deep_clone.  All nodes and attributes are copied:"
msgstr ""
"継承されたメソッド REXML::Parent#deep_clone で要素の深いクローンを作成しま"
"す。\n"
"全てのノードと属性がコピーされます。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1313
#, no-wrap
msgid ""
"  doc.to_s.size   # => 825\n"
"  clone  = doc.deep_clone\n"
"  clone.to_s.size # => 825\n"
msgstr ""
"  doc.to_s.size   # => 825\n"
"  clone  = doc.deep_clone\n"
"  clone.to_s.size # => 825\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1315
msgid "== Writing the Document"
msgstr "== 文書を書き出す"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1318
msgid ""
"Write a document to an \\IO stream (defaults to <tt>$stdout</tt>)  with "
"method REXML::Document#write:"
msgstr ""
"メソッド REXML::Document#write で文書と\\IOストリーム（既定では<tt>$stdout</"
"tt>）に書き出します。"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1320
#, no-wrap
msgid "  doc.write\n"
msgstr "  doc.write\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1325
#, no-wrap
msgid ""
"  <?xml version='1.0' encoding='UTF-8'?>\n"
"  <bookstore>\n"
msgstr ""
"  <?xml version='1.0' encoding='UTF-8'?>\n"
"  <bookstore>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1332
#, no-wrap
msgid ""
"  <book category='cooking'>\n"
"    <title lang='en'>Everyday Italian</title>\n"
"    <author>Giada De Laurentiis</author>\n"
"    <year>2005</year>\n"
"    <price>30.00</price>\n"
"  </book>\n"
msgstr ""
"  <book category='cooking'>\n"
"    <title lang='en'>Everyday Italian</title>\n"
"    <author>Giada De Laurentiis</author>\n"
"    <year>2005</year>\n"
"    <price>30.00</price>\n"
"  </book>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1339
#, no-wrap
msgid ""
"  <book category='children'>\n"
"    <title lang='en'>Harry Potter</title>\n"
"    <author>J K. Rowling</author>\n"
"    <year>2005</year>\n"
"    <price>29.99</price>\n"
"  </book>\n"
msgstr ""
"  <book category='children'>\n"
"    <title lang='en'>Harry Potter</title>\n"
"    <author>J K. Rowling</author>\n"
"    <year>2005</year>\n"
"    <price>29.99</price>\n"
"  </book>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1350
#, no-wrap
msgid ""
"  <book category='web'>\n"
"    <title lang='en'>XQuery Kick Start</title>\n"
"    <author>James McGovern</author>\n"
"    <author>Per Bothner</author>\n"
"    <author>Kurt Cagle</author>\n"
"    <author>James Linn</author>\n"
"    <author>Vaidyanathan Nagarajan</author>\n"
"    <year>2003</year>\n"
"    <price>49.99</price>\n"
"  </book>\n"
msgstr ""
"  <book category='web'>\n"
"    <title lang='en'>XQuery Kick Start</title>\n"
"    <author>James McGovern</author>\n"
"    <author>Per Bothner</author>\n"
"    <author>Kurt Cagle</author>\n"
"    <author>James Linn</author>\n"
"    <author>Vaidyanathan Nagarajan</author>\n"
"    <year>2003</year>\n"
"    <price>49.99</price>\n"
"  </book>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1357
#, no-wrap
msgid ""
"  <book category='web' cover='paperback'>\n"
"    <title lang='en'>Learning XML</title>\n"
"    <author>Erik T. Ray</author>\n"
"    <year>2003</year>\n"
"    <price>39.95</price>\n"
"  </book>\n"
msgstr ""
"  <book category='web' cover='paperback'>\n"
"    <title lang='en'>Learning XML</title>\n"
"    <author>Erik T. Ray</author>\n"
"    <year>2003</year>\n"
"    <price>39.95</price>\n"
"  </book>\n"

#. type: Plain text
#: ../doc/rexml/tutorial.rdoc:1358
#, no-wrap
msgid "  </bookstore>\n"
msgstr "  </bookstore>\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:2
msgid "== Element Context"
msgstr "== 要素の文脈"

#. type: Plain text
#: ../doc/rexml/context.rdoc:5
msgid ""
"Notes: - All code on this page presupposes that the following has been "
"executed:"
msgstr ""
"注意：ここにある全てのコードでは以下が実行されていることを前提にしています。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:7
#, no-wrap
msgid "    require 'rexml/document'\n"
msgstr "    require 'rexml/document'\n"

#. type: Bullet: '- '
#: ../doc/rexml/context.rdoc:10
msgid ""
"For convenience, examples on this page use +REXML::Document.new+, not "
"+REXML::Element.new+.  This is completely valid, because REXML::Document is "
"a subclass of REXML::Element."
msgstr ""
"便宜上、本ページの例では +REXML::Element.new+ ではなく +REXML::Document.new+ を使っています。\n"
"これは完全に妥当です。\n"
"なぜなら REXML::Document は REXML::Element の副クラスだからです。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:14
msgid ""
"The context for an element is a hash of processing directives that influence "
"the way \\XML is read, stored, and written.  The context entries are:"
msgstr ""
"要素の文脈は処理指示のハッシュで、\\XMLが読まれたり、格納されたり、書き出され"
"たりするやり方に影響します。\n"
"文脈の各項目は以下の通り。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:22
msgid ""
"The default context for a new element is <tt>{}</tt>.  You can set the "
"context at element-creation time:"
msgstr ""
"新しい要素の既定の文脈は<tt>{}</tt>です。\n"
"文脈は要素の作成時に設定できます。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:25
#, no-wrap
msgid ""
"  d = REXML::Document.new('', {compress_whitespace: :all, raw: :all})\n"
"  d.context # => {:compress_whitespace=>:all, :raw=>:all}\n"
msgstr ""
"  d = REXML::Document.new('', {compress_whitespace: :all, raw: :all})\n"
"  d.context # => {:compress_whitespace=>:all, :raw=>:all}\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:27
msgid "You can reset the entire context by assigning a new hash:"
msgstr "新しいハッシュを代入することで文脈全体を白紙に戻せます。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:30
#, no-wrap
msgid ""
"  d.context = {ignore_whitespace_nodes: :all}\n"
"  d.context # => {:ignore_whitespace_nodes=>:all}\n"
msgstr ""
"  d.context = {ignore_whitespace_nodes: :all}\n"
"  d.context # => {:ignore_whitespace_nodes=>:all}\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:32
msgid "Or you can create or modify an individual entry:"
msgstr "もしくは個別の項目を作成したり変更したりできます。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:35
#, no-wrap
msgid ""
"  d.context[:raw] = :all\n"
"  d.context # => {:ignore_whitespace_nodes=>:all, :raw=>:all}\n"
msgstr ""
"  d.context[:raw] = :all\n"
"  d.context # => {:ignore_whitespace_nodes=>:all, :raw=>:all}\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:37
msgid "=== +:respect_whitespace+"
msgstr "=== +:respect_whitespace+"

#. type: Plain text
#: ../doc/rexml/context.rdoc:39 ../doc/rexml/context.rdoc:62
msgid "Affects: +REXML::Element.new+, +REXML::Element.text=+."
msgstr "影響があるもの：+REXML::Element.new+, +REXML::Element.text=+"

#. type: Plain text
#: ../doc/rexml/context.rdoc:41
msgid ""
"By default, all parsed whitespace is respected (that is, stored whitespace "
"not compressed):"
msgstr ""
"既定では全ての解析された空白が保たれます（つまり、保管された空白は圧縮されま"
"せん）。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:45
#, no-wrap
msgid ""
"  xml_string = '<root><foo>a   b</foo>    <bar>c   d</bar>   <baz>e   f</baz></root>'\n"
"  d = REXML::Document.new(xml_string)\n"
"  d.to_s # => \"<root><foo>a   b</foo>    <bar>c   d</bar>   <baz>e   f</baz></root>\"\n"
msgstr ""
"  xml_string = '<root><foo>a   b</foo>    <bar>c   d</bar>   <baz>e   f</baz></root>'\n"
"  d = REXML::Document.new(xml_string)\n"
"  d.to_s # => \"<root><foo>a   b</foo>    <bar>c   d</bar>   <baz>e   f</baz></root>\"\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:49
msgid ""
"Use +:respect_whitespace+ with an array of element names to specify the "
"elements that _are_ to have their whitespace respected; other elements' "
"whitespace, and whitespace between elements, will be compressed."
msgstr ""
"要素名の配列と共に +:respect_whitespace+ を使うと、空白が保たれる要素を厳密に"
"指定します。\n"
"他の要素の空白や要素間の空白は圧縮されます。"

# FIXME: 原文について、whitespaceはnamespaceと思われます。
#. type: Plain text
#: ../doc/rexml/context.rdoc:52
msgid ""
"In this example: +foo+ and +baz+ will have their whitespace respected; +bar+ "
"and the space between elements will have their whitespace compressed:"
msgstr ""
"この例において+foo+と+baz+それぞれでは空白が保たれています。\n"
"+baz+と要素間の空白は、圧縮される名前空間を持ちます。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:58
#, no-wrap
msgid ""
"  d = REXML::Document.new(xml_string, {respect_whitespace: ['foo', 'baz']})\n"
"  d.to_s # => \"<root><foo>a   b</foo> <bar>c d</bar> <baz>e   f</baz></root>\"\n"
"  bar = d.root[2] # => <bar> ... </>\n"
"  bar.text = 'X   Y'\n"
"  d.to_s # => \"<root><foo>a   b</foo> <bar>X Y</bar> <baz>e   f</baz></root>\"\n"
msgstr ""
"  d = REXML::Document.new(xml_string, {respect_whitespace: ['foo', 'baz']})\n"
"  d.to_s # => \"<root><foo>a   b</foo> <bar>c d</bar> <baz>e   f</baz></root>\"\n"
"  bar = d.root[2] # => <bar> ... </>\n"
"  bar.text = 'X   Y'\n"
"  d.to_s # => \"<root><foo>a   b</foo> <bar>X Y</bar> <baz>e   f</baz></root>\"\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:60
msgid "=== +:compress_whitespace+"
msgstr "=== +:compress_whitespace+"

#. type: Plain text
#: ../doc/rexml/context.rdoc:65
msgid ""
"Use <tt>compress_whitespace: :all</tt> to compress whitespace both within "
"and between elements:"
msgstr ""
"<tt>compress_whitespace: :all</tt>を使うと要素の中と要素間の両方で空白を圧縮"
"します。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:69
#, no-wrap
msgid ""
"  xml_string = '<root><foo>a   b</foo>    <bar>c   d</bar>   <baz>e   f</baz></root>'\n"
"  d = REXML::Document.new(xml_string, {compress_whitespace: :all})\n"
"  d.to_s # => \"<root><foo>a b</foo> <bar>c d</bar> <baz>e f</baz></root>\"\n"
msgstr ""
"  xml_string = '<root><foo>a   b</foo>    <bar>c   d</bar>   <baz>e   f</baz></root>'\n"
"  d = REXML::Document.new(xml_string, {compress_whitespace: :all})\n"
"  d.to_s # => \"<root><foo>a b</foo> <bar>c d</bar> <baz>e f</baz></root>\"\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:73
msgid ""
"Use +:compress_whitespace+ with an array of element names to compress "
"whitespace in those elements, but not in other elements nor between elements."
msgstr ""
"要素名の配列と一緒に +:compress_whitespace+ を使うと、それらの要素の空白が圧"
"縮されますが、他の要素の中や他の要素間では圧縮されません。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:76
msgid ""
"In this example, +foo+ and +baz+ will have their whitespace compressed; "
"+bar+ and the space between elements will not:"
msgstr ""
"この例では+foo+と+baz+は空白が圧縮されます。\n"
"+bar+と要素間の空白は圧縮されません。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:82
#, no-wrap
msgid ""
"  d = REXML::Document.new(xml_string, {compress_whitespace: ['foo', 'baz']})\n"
"  d.to_s # => \"<root><foo>a b</foo>    <bar>c   d</bar>   <baz>e f</baz></root>\"\n"
"  foo = d.root[0] # => <foo> ... </>\n"
"  foo.text= 'X   Y'\n"
"  d.to_s # => \"<root><foo>X Y</foo>    <bar>c   d</bar>   <baz>e f</baz></root>\"\n"
msgstr ""
"  d = REXML::Document.new(xml_string, {compress_whitespace: ['foo', 'baz']})\n"
"  d.to_s # => \"<root><foo>a b</foo>    <bar>c   d</bar>   <baz>e f</baz></root>\"\n"
"  foo = d.root[0] # => <foo> ... </>\n"
"  foo.text= 'X   Y'\n"
"  d.to_s # => \"<root><foo>X Y</foo>    <bar>c   d</bar>   <baz>e f</baz></root>\"\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:84
msgid "=== +:ignore_whitespace_nodes+"
msgstr "=== +:ignore_whitespace_nodes+"

#. type: Plain text
#: ../doc/rexml/context.rdoc:86
msgid "Affects: +REXML::Element.new+."
msgstr "影響があるもの：+REXML::Element.new+"

#. type: Plain text
#: ../doc/rexml/context.rdoc:88
msgid ""
"Use <tt>ignore_whitespace_nodes: :all</tt> to omit all whitespace-only "
"elements."
msgstr ""
"<tt>ignore_whitespace_nodes: :all</tt>を使うと全ての空白のみの要素が省かれま"
"す。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:90
msgid ""
"In this example, +bar+ has a text node, while nodes +foo+ and +baz+ do not:"
msgstr ""
"この例では+bar+にテキストノードがありますが、ノード+foo+および+bar+にはありま"
"せん。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:101
#, no-wrap
msgid ""
"  xml_string = '<root><foo>   </foo><bar> BAR </bar><baz>   </baz></root>'\n"
"  d = REXML::Document.new(xml_string, {ignore_whitespace_nodes: :all})\n"
"  d.to_s # => \"<root><foo> FOO </foo><bar/><baz> BAZ </baz></root>\"\n"
"  root = d.root   # => <root> ... </>\n"
"  foo = root[0]   # => <foo/>\n"
"  bar = root[1]   # => <bar> ... </>\n"
"  baz = root[2]   # => <baz/>\n"
"  foo.first.class # => NilClass\n"
"  bar.first.class # => REXML::Text\n"
"  baz.first.class # => NilClass\n"
msgstr ""
"  xml_string = '<root><foo>   </foo><bar> BAR </bar><baz>   </baz></root>'\n"
"  d = REXML::Document.new(xml_string, {ignore_whitespace_nodes: :all})\n"
"  d.to_s # => \"<root><foo> FOO </foo><bar/><baz> BAZ </baz></root>\"\n"
"  root = d.root   # => <root> ... </>\n"
"  foo = root[0]   # => <foo/>\n"
"  bar = root[1]   # => <bar> ... </>\n"
"  baz = root[2]   # => <baz/>\n"
"  foo.first.class # => NilClass\n"
"  bar.first.class # => REXML::Text\n"
"  baz.first.class # => NilClass\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:104
msgid ""
"Use +:ignore_whitespace_nodes+ with an array of element names to specify the "
"elements that are to have whitespace nodes ignored."
msgstr ""
"+:ignore_whitespace_nodes+を要素名の配列と共に使うと、空白ノードが無視される"
"要素が指定されます。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:106
msgid ""
"In this example, +bar+ and +baz+ have text nodes, while node +foo+ does not."
msgstr ""
"この例では+bar+と+baz+にテキストノードがあります。\n"
"一方で+foo+にはありません。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:117
#, no-wrap
msgid ""
"  xml_string = '<root><foo>   </foo><bar> BAR </bar><baz>   </baz></root>'\n"
"  d = REXML::Document.new(xml_string, {ignore_whitespace_nodes: ['foo']})\n"
"  d.to_s # => \"<root><foo/><bar> BAR </bar><baz>   </baz></root>\"\n"
"  root = d.root   # => <root> ... </>\n"
"  foo = root[0]   # => <foo/>\n"
"  bar = root[1]   # => <bar> ... </>\n"
"  baz = root[2]   # => <baz> ... </>\n"
"  foo.first.class # => NilClass\n"
"  bar.first.class # => REXML::Text\n"
"  baz.first.class # => REXML::Text\n"
msgstr ""
"  xml_string = '<root><foo>   </foo><bar> BAR </bar><baz>   </baz></root>'\n"
"  d = REXML::Document.new(xml_string, {ignore_whitespace_nodes: ['foo']})\n"
"  d.to_s # => \"<root><foo/><bar> BAR </bar><baz>   </baz></root>\"\n"
"  root = d.root   # => <root> ... </>\n"
"  foo = root[0]   # => <foo/>\n"
"  bar = root[1]   # => <bar> ... </>\n"
"  baz = root[2]   # => <baz> ... </>\n"
"  foo.first.class # => NilClass\n"
"  bar.first.class # => REXML::Text\n"
"  baz.first.class # => REXML::Text\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:119
msgid "=== +:raw+"
msgstr "=== +:raw+"

#. type: Plain text
#: ../doc/rexml/context.rdoc:121
msgid "Affects: +Element.text=+, +Element.add_text+, +Text.to_s+."
msgstr "影響するもの：+Element.text=+, +Element.add_text+, +Text.to_s+"

#. type: Plain text
#: ../doc/rexml/context.rdoc:123
msgid "Parsing of +a+ elements is not affected by +raw+:"
msgstr "+a+要素の解析は+raw+の影響を受けません。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:130
#, no-wrap
msgid ""
"  xml_string = '<root><a>0 &lt; 1</a><b>1 &gt; 0</b></root>'\n"
"  d = REXML::Document.new(xml_string, {:raw => ['a']})\n"
"  d.root.to_s # => \"<root><a>0 &lt; 1</a><b>1 &gt; 0</b></root>\"\n"
"  a, b = *d.root.elements\n"
"  a.to_s # => \"<a>0 &lt; 1</a>\"\n"
"  b.to_s # => \"<b>1 &gt; 0</b>\"\n"
msgstr ""
"  xml_string = '<root><a>0 &lt; 1</a><b>1 &gt; 0</b></root>'\n"
"  d = REXML::Document.new(xml_string, {:raw => ['a']})\n"
"  d.root.to_s # => \"<root><a>0 &lt; 1</a><b>1 &gt; 0</b></root>\"\n"
"  a, b = *d.root.elements\n"
"  a.to_s # => \"<a>0 &lt; 1</a>\"\n"
"  b.to_s # => \"<b>1 &gt; 0</b>\"\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:132
msgid "But Element#text= is affected:"
msgstr "しかし Element#text= は影響を受けます。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:137
#, no-wrap
msgid ""
"  a.text = '0 &lt; 1'\n"
"  b.text = '1 &gt; 0'\n"
"  a.to_s # => \"<a>0 &lt; 1</a>\"\n"
"  b.to_s # => \"<b>1 &amp;gt; 0</b>\"\n"
msgstr ""
"  a.text = '0 &lt; 1'\n"
"  b.text = '1 &gt; 0'\n"
"  a.to_s # => \"<a>0 &lt; 1</a>\"\n"
"  b.to_s # => \"<b>1 &amp;gt; 0</b>\"\n"

#. type: Plain text
#: ../doc/rexml/context.rdoc:139
msgid "As is Element.add_text:"
msgstr "Element.add_text も同様です。"

#. type: Plain text
#: ../doc/rexml/context.rdoc:143
#, no-wrap
msgid ""
"  a.add_text(' so 1 &gt; 0')\n"
"  b.add_text(' so 0 &lt; 1')\n"
"  a.to_s # => \"<a>0 &lt; 1 so 1 &gt; 0</a>\"\n"
"  b.to_s # => \"<b>1 &amp;gt; 0 so 0 &amp;lt; 1</b>\"\n"
msgstr ""
"  a.add_text(' so 1 &gt; 0')\n"
"  b.add_text(' so 0 &lt; 1')\n"
"  a.to_s # => \"<a>0 &lt; 1 so 1 &gt; 0</a>\"\n"
"  b.to_s # => \"<b>1 &amp;gt; 0 so 0 &amp;lt; 1</b>\"\n"
